{
    "color": "rgba(0, 0, 0, 0)",
    "disableSend": false,
    "idIndex": 58,
    "injectInput": false,
    "name": "AdventureTools",
    "onlyBorderColor": false,
    "placeBeforeInput": false,
    "qrList": [
        {
            "automationId": "",
            "contextList": [],
            "executeOnAi": false,
            "executeOnChatChange": false,
            "executeOnGroupMemberDraft": false,
            "executeOnStartup": false,
            "executeOnUser": false,
            "id": 1,
            "isHidden": false,
            "label": "⤬ Quick Delete",
            "message": "/qr-update set=AdventureTools label=\"⇊ Save Tracker\" hidden=true |\n/delmode 1 ||\n",
            "preventAutoExecute": true,
            "showLabel": false,
            "title": "Deletes the last message in the chat"
        },
        {
            "automationId": "",
            "contextList": [],
            "executeOnAi": false,
            "executeOnChatChange": false,
            "executeOnGroupMemberDraft": false,
            "executeOnStartup": false,
            "executeOnUser": false,
            "id": 3,
            "isHidden": false,
            "label": "᳃ Config ⋮",
            "message": "/parser-flag STRICT_ESCAPING on ||\n\n/let \"demarc\" {{newline}}{{newline}}---{{newline}}{{newline}} |\n\n/if left={{getvar::cotPrompt}} right=\"\" rule=eq  \"/:AdventureTools.defaultPrompts\" |\n/if left={{getvar::cotTemplate}} right=\"\" rule=eq \"/:AdventureTools.defaultPrompts\" |\n/if left={{getvar::cotResponsePrompt}} right=\"\" rule=eq \"/:AdventureTools.defaultPrompts\" |\n/if left={{getvar::responsePrompt}} right=\"\" rule=eq \"/:AdventureTools.defaultPrompts\" |\n/if left={{getvar::trackerPrompt}} right=\"\" rule=eq \"/:AdventureTools.defaultPrompts\" |\n/if left={{getvar::trackerRefreshPrompt}} right=\"\" rule=eq \"/:AdventureTools.defaultPrompts\" |\n/if left={{getvar::trackerTemplate}} right=\"\" rule=eq \"/:AdventureTools.defaultPrompts\" |\n\n/buttons labels=[\"Settings Manager\", \"Lorebook Select\", \"Version Select\", \"Generation Mode\", \"Samplers, APIs, Models, Etc.\", \"Footer Settings\"] Config Menu |\n/setvar key=\"menuSelect\" {{pipe}} ||\n\n/if left={{getvar::menuSelect}} right=\"Lorebook Select\" rule=eq {:\n\t/wi-list-books ||\n\t/buttons labels={{pipe}} Select the lorebook you'd like to use. If the one you'd like isn't shown, cancel and make sure it's active. |\n\t\t/if left={{pipe}} right=\"\" rule=eq \n\t\t\telse={: /setvar key=lorebookName {{pipe}} | \n\t\t\t/pass :}\n\t\t\t\"/abort\" |\n:} |\n\n/if left={{getvar::menuSelect}} right=\"Version Select\" rule=eq {:\n\t/buttons labels=[\"Modern Version\", \"Fantasy Version\"] Select which version you'd like to use |\n\t/if left={{pipe}} right=\"\" rule=eq \n\telse={: /setvar key=toolsVersion {{pipe}} |\n\t\t/pass :}\n\t\t\"/abort\" |\n:} |\n\n/if left={{getvar::menuSelect}} right=\"Generation Mode\" rule=eq {:\n\t/buttons labels=[\"Classic\", \"Plus\"] Select your message generation mode. Plus is for CoT (Chain of Thought prompting), and Classic is for a normal mode. This only affects sends/regens | \n\t\t/if left={{pipe}} right=\"\" rule=eq \n\t\t\telse={: /setvar key=messageMode {{pipe}} ||\n\t\t\t/pass :}\n\t\t\t\"/abort\" |\n:} |\n\n/if left={{getvar::messageMode}} right=Plus rule=eq else={:\n\t/qr-update set=AdventureTools label=\" Send+ ⮕\" hidden=true |\n\t/qr-update set=AdventureTools label=\" Send ⮕\" hidden=false |\n\t/pass :}\n\t{: /qr-update set=AdventureTools label=\" Send ⮕\" hidden=true |\n\t/qr-update set=AdventureTools label=\" Send+ ⮕\" hidden=false |\n\t/pass\n:} |\n\n/if left={{getvar::menuSelect}} right=\"Samplers, APIs, Models, Etc.\" rule=eq {:\n\t/:AdventureTools.Samplers-Others | /pass :} |\n\n/if left={{getvar::menuSelect}} right=\"Footer Settings\" rule=eq {:\n\t/buttons labels=[\"Enable Footer\", \"Disable Footer\"] Would you like to disable the footer HUD or keep it on? |\n\t\t/if left={{pipe}} right=\"\" rule=eq\n\t\t\telse={: /setvar key=\"footerMode\" {{pipe}} | \n\t\t\t/pass :}\n\t\t\t{: /flushvar menuSelect | /abort :}\n:} |\n\n/if left={{getvar::menuSelect}} right=\"Settings Manager\" rule=eq {:\n\t /:AdventureTools.settings-Manager | /pass :} |\n\n/flushvar menuSelect |",
            "preventAutoExecute": true,
            "showLabel": false,
            "title": "Configure settings such as lorebook selection, prompts, text completion presets etc."
        },
        {
            "automationId": "",
            "contextList": [],
            "executeOnAi": false,
            "executeOnChatChange": false,
            "executeOnGroupMemberDraft": false,
            "executeOnStartup": false,
            "executeOnUser": false,
            "id": 7,
            "isHidden": true,
            "label": "⇈ Update Tracker",
            "message": "/let \"demarc\" {{newline}}{{newline}}---{{newline}}{{newline}} |\n\n/parser-flag STRICT_ESCAPING on ||\n\n/if left={{getvar::trackerRefreshPrompt}} right=\"\" rule=eq \"/:AdventureTools.defaultPrompts\" |\n/if left={{getvar::trackerTemplate}} right=\"\" rule=eq \"/:AdventureTools.defaultPrompts\" |\n\n/setvar key=UpdateTracker {{getvar::trackerTemplate}} |\n\n/inject id=trackerInject position=chat depth=2 scan=true role=User {{getvar::UpdateTracker}} |\n\n/echo Updating Tracker, please wait. |\n/gen lock=on {{instructFirstOutput}} \n<Instruction>\n{{getvar::trackerRefreshPrompt}}\n</Instruction>\n```\n<template>\n{{getvar::trackerTemplate}}\n</template>\n```\n<template>\n{{getvar::trackerTemplate}}\n</template>\n{{instructFirstOutput}} |\n/setvar key=UpdateTracker {{pipe}} |\n/echo Tracker updated! |\n\n/re-replace var=UpdateTracker find=\"/\\`/gm\" replace={{noop}} {{getvar::UpdateTracker}} |\n/setvar key=UpdateTracker ||\n/re-replace var=UpdateTracker find=\"/\\[/gm\" replace={{noop}} {{getvar::UpdateTracker}} |\n/setvar key=UpdateTracker ||\n/re-replace var=UpdateTracker find=\"/\\]/gm\" replace={{noop}} {{getvar::UpdateTracker}} |\n/setvar key=UpdateTracker ||\n/re-replace var=UpdateTracker find=\"/[`\\s]*[\\[\\<]template[\\>\\]]/ims\" replace={{noop}} {{getvar::UpdateTracker}} |\n/setvar key=UpdateTracker ||\n/re-replace var=UpdateTracker find=\"/[`\\s]*[\\[\\<]\\/template[\\>\\]]/ims\" replace={{noop}} {{getvar::UpdateTracker}} |\n/setvar key=UpdateTracker ||\n\n/preset {{getvar::adventurePreset}} |",
            "preventAutoExecute": true,
            "showLabel": false,
            "title": "Force a tracker update. Useful if you've just deleted a bot message"
        },
        {
            "automationId": "",
            "contextList": [],
            "executeOnAi": false,
            "executeOnChatChange": false,
            "executeOnGroupMemberDraft": false,
            "executeOnStartup": false,
            "executeOnUser": false,
            "id": 5,
            "isHidden": false,
            "label": "▣ Tracker",
            "message": "/parser-flag STRICT_ESCAPING on ||\n/send {{getvar::UpdateTracker}} |\n/setvar  key=trackerMessageID {{lastMessageId}} ||\n/qr-update set=AdventureTools label=\"⇊ Save Tracker\" hidden=false |",
            "preventAutoExecute": true,
            "showLabel": false,
            "title": "Display the tracker in the chat"
        },
        {
            "automationId": "",
            "contextList": [],
            "executeOnAi": false,
            "executeOnChatChange": false,
            "executeOnGroupMemberDraft": false,
            "executeOnStartup": false,
            "executeOnUser": false,
            "id": 11,
            "isHidden": true,
            "label": "Reset Tracker",
            "message": "/parser-flag STRICT_ESCAPING on ||\n\n/let \"demarc\" {{newline}}{{newline}}---{{newline}}{{newline}} |\n\n/if left={{getvar::trackerTemplate}} right=\"\" rule=eq \"/:AdventureTools.defaultPrompts\" |\n\n/setvar key=UpdateTracker {{getvar::trackerTemplate}} |",
            "preventAutoExecute": true,
            "showLabel": false,
            "title": "Resets the tracker to a blank template"
        },
        {
            "automationId": "",
            "contextList": [],
            "executeOnAi": false,
            "executeOnChatChange": false,
            "executeOnGroupMemberDraft": false,
            "executeOnStartup": false,
            "executeOnUser": false,
            "id": 19,
            "isHidden": true,
            "label": "⇊ Save Tracker",
            "message": "/parser-flag STRICT_ESCAPING on ||\n\n/message names=off {{getvar::trackerMessageID}} |\n/setvar key=UpdateTracker {{pipe}} ||\n/qr-update set=AdventureTools label=\"⇊ Save Tracker\" hidden=true |\n\n/len {{getvar::savedTracker}} |\n/setvar key=indexStart {{pipe}} ||\n/addvar key=indexStart -2 ||\n\n/setvar key=tempTrackerList [] | |\n/filter var=savedTracker {: /test left={{index}} rule=lte right={{getvar::indexStart}} :} |\n/foreach list={{pipe}} {: /addvar key=tempTrackerList {{item}} :} |\n/setvar key=savedTracker {{getvar::tempTrackerList}} |\n/addvar key=savedTracker {{getvar::UpdateTracker}} ||\n\n/echo Tracker saved! |\n\n/flushvar trackerMessageID |\n/flushvar tempTrackerList |",
            "preventAutoExecute": true,
            "showLabel": false,
            "title": "Save any tracker changes you've made"
        },
        {
            "automationId": "",
            "contextList": [],
            "executeOnAi": false,
            "executeOnChatChange": false,
            "executeOnGroupMemberDraft": false,
            "executeOnStartup": false,
            "executeOnUser": false,
            "id": 33,
            "isHidden": true,
            "label": "Regenerate-Classic",
            "message": "/hide {{getvar::lastBotMessageID}} |\n\n/parser-flag STRICT_ESCAPING on ||\n\n/let \"demarc\" {{newline}}{{newline}}---{{newline}}{{newline}} |\n\n/if left={{getvar::responsePrompt}} right=\"\" rule=eq \"/:AdventureTools.defaultPrompts\" |\n/if left={{getvar::trackerPrompt}} right=\"\" rule=eq \"/:AdventureTools.defaultPrompts\" |\n/if left={{getvar::trackerTemplate}} right=\"\" rule=eq \"/:AdventureTools.defaultPrompts\" |\n\n/len {{getvar::savedTracker}} |\n/setvar key=regenNum {{pipe}} ||\n/addvar key=regenNum -2 ||\n\n/len {{getvar::savedTracker}} |\n/if left={{pipe}} right=\"1\" rule=eq else={:\n\t/getvar key=regenNum |\n\t/getat var=savedTracker index={{pipe}} |\n\t/setvar key=UpdateTracker {{pipe}} ||\n\t:}\n\t\"/setvar key=UpdateTracker {{getvar::trackerTemplate}} | /flushvar savedTracker | /setvar key=savedTracker [] \" |\n\n/setvar key=tempTrackerList [] | |\n/filter var=savedTracker {: /test left={{index}} rule=lte right={{getvar::regenNum}} :} |\n/foreach list={{pipe}} {: /addvar key=tempTrackerList {{item}} :} |\n/setvar key=savedTracker {{getvar::tempTrackerList}} |\n\n/inject id=trackerInject position=chat depth=2 scan=true role=User {{getvar::UpdateTracker}} |\n\n/if left={{getvar::advAPI}} right=\"\" rule=eq else={: \n\t/api {{getvar::advAPI}} |\n\t:}\n\t{: /pass |\n:} |\n\n\n/if left={{getvar::advModel}} right=\"\" rule=eq else={: \n\t/model {{getvar::advModel}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::adventurePreset}} right=\"\" rule=eq else={: \n\t/preset {{getvar::adventurePreset}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::advCTXTemplate}} right=\"\" rule=eq else={: \n\t/context {{getvar::advCTXTemplate}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::adventureInstructPreset}} right=\"\" rule=eq else={: \n\t/instruct {{getvar::adventureInstructPreset}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::advTokenizer}} right=\"\" rule=eq else={: \n\t/tokenizer {{getvar::advTokenizer}} |\n\t:}\n\t{: /pass |\n:} |\n\n\n/gen lock=on as=char name={{char}} {{instructFirstOutput}} \n<Instruction>\n{{getvar::responsePrompt}}\n</Instruction>\n{{instructFirstOutput}} |\n/setvar key=botResponse {{pipe}} ||\n\n/:AdventureTools.regex-Pile |\n\n/if left={{getvar::cotAPI}} right=\"\" rule=eq else={: \n\t/api {{getvar::cotAPI}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::cotModel}} right=\"\" rule=eq else={: \n\t/model {{getvar::cotModel}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::cotPreset}} right=\"\" rule=eq else={: \n\t/preset {{getvar::cotPreset}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::cotCTXTemplate}} right=\"\" rule=eq else={: \n\t/context {{getvar::cotCTXTemplate}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::cotInstructPreset}} right=\"\" rule=eq else={: \n\t/instruct {{getvar::cotInstructPreset}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::cotTokenizer}} right=\"\" rule=eq else={: \n\t/tokenizer {{getvar::cotTokenizer}} |\n\t:}\n\t{: /pass |\n:} |\n\n/echo Updating Tracker, please wait. |\n/gen lock=on length=1500 {{instructFirstOutput}} \n<Instruction>\n{{getvar::trackerPrompt}}\n</Instruction>\n```\n<template>\n{{getvar::trackerTemplate}}\n</template>\n```\n{{instructFirstOutput}} |\n/setvar key=UpdateTracker {{pipe}} |\n/echo Tracker updated! |\n\n/:AdventureTools.regex-Pile |\n\n/if left={{getvar::footerMode}} right=\"Disable Footer\" rule=eq else={:\n\t/swipes-add name={{char}} {{getvar::botResponse}}{{var::demarc}}**Time:** {{getvar::currentTime}}{{newline}}**Current Location:** {{getvar::currentLocation}}{{newline}}**Nearby Characters:** {{getvar::currentNearby}} |\n\t:}\n\t{: /swipes-add name={{char}} {{getvar::botResponse}} |\n:} |\n\n/addvar key=savedTracker {{getvar::UpdateTracker}} ||\n\n/setvar key=\"messageMode\" Classic |\n/flushvar botResponse |\n/flushvar tempTrackerList |\n/flushvar currentObjects |\n/flushvar currentTime |\n/flushvar currentLocation |\n/flushvar currentNearby |\n/flushvar regenNum |\n\n/unhide {{getvar::lastBotMessageID}} |",
            "preventAutoExecute": true,
            "showLabel": false,
            "title": ""
        },
        {
            "automationId": "",
            "contextList": [],
            "executeOnAi": false,
            "executeOnChatChange": false,
            "executeOnGroupMemberDraft": false,
            "executeOnStartup": false,
            "executeOnUser": false,
            "id": 29,
            "isHidden": true,
            "label": "Regenerate-Plus",
            "message": "/hide {{getvar::lastBotMessageID}} |\n/breakpoint | \n/parser-flag STRICT_ESCAPING on ||\n\n/let \"demarc\" {{newline}}{{newline}}---{{newline}}{{newline}} |\n\n/if left={{getvar::cotPrompt}} right=\"\" rule=eq  \"/:AdventureTools.defaultPrompts\" |\n/if left={{getvar::cotTemplate}} right=\"\" rule=eq \"/:AdventureTools.defaultPrompts\" |\n/if left={{getvar::cotResponsePrompt}} right=\"\" rule=eq \"/:AdventureTools.defaultPrompts\" |\n/if left={{getvar::trackerPrompt}} right=\"\" rule=eq \"/:AdventureTools.defaultPrompts\" |\n/if left={{getvar::trackerTemplate}} right=\"\" rule=eq \"/:AdventureTools.defaultPrompts\" |\n\n/len {{getvar::savedTracker}} |\n/setvar key=regenNum {{pipe}} ||\n/addvar key=regenNum -2 ||\n\n/len {{getvar::savedTracker}} |\n/if left={{pipe}} right=\"1\" rule=eq else={:\n\t/getvar key=regenNum |\n\t/getat var=savedTracker index={{pipe}} ||\n\t/setvar key=UpdateTracker {{pipe}} ||\n\t:}\n\t\"/setvar key=UpdateTracker {{getvar::trackerTemplate}} | /flushvar savedTracker | /setvar key=savedTracker []\" |\n\n/setvar key=tempTrackerList [] | |\n/filter var=savedTracker {: /test left={{index}} rule=lte right={{getvar::regenNum}} :} |\n/foreach list={{pipe}} {: /addvar key=tempTrackerList {{item}} :} |\n/setvar key=savedTracker {{getvar::tempTrackerList}} |\n\n/inject id=trackerInject position=chat depth=2 scan=true role=User {{getvar::UpdateTracker}} |\n\n/if left={{getvar::cotAPI}} right=\"\" rule=eq else={: \n\t/api {{getvar::cotAPI}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::cotModel}} right=\"\" rule=eq else={: \n\t/model {{getvar::cotModel}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::cotPreset}} right=\"\" rule=eq else={: \n\t/preset {{getvar::cotPreset}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::cotCTXTemplate}} right=\"\" rule=eq else={: \n\t/context {{getvar::cotCTXTemplate}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::cotInstructPreset}} right=\"\" rule=eq else={: \n\t/instruct {{getvar::cotInstructPreset}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::cotTokenizer}} right=\"\" rule=eq else={: \n\t/tokenizer {{getvar::cotTokenizer}} |\n\t:}\n\t{: /pass |\n:} |\n\n\n/gen lock=on length=1500 {{instructFirstOutput}} \n<Instruction>\n{{getvar::cotPrompt}}\n</Instruction>\nOnce you have all the answers, output your analysis, strictly following the template. Fill in placeholders. All fields required:\n```\n<template>\n{{getvar::cotTemplate}}\n</template>\n```\n{{instructFirstOutput}} |\n/setvar key=\"botLogic\" {{pipe}} |\n\n/:AdventureTools.regex-Pile |\n\n/swipes-add name={{char}} {{getvar::botLogic}} ||\n\n/if left={{getvar::advAPI}} right=\"\" rule=eq else={: \n\t/api {{getvar::advAPI}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::advModel}} right=\"\" rule=eq else={: \n\t/model {{getvar::advModel}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::adventurePreset}} right=\"\" rule=eq else={: \n\t/preset {{getvar::adventurePreset}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::advCTXTemplate}} right=\"\" rule=eq else={: \n\t/context {{getvar::advCTXTemplate}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::adventureInstructPreset}} right=\"\" rule=eq else={: \n\t/instruct {{getvar::adventureInstructPreset}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::advTokenizer}} right=\"\" rule=eq else={: \n\t/tokenizer {{getvar::advTokenizer}} |\n\t:}\n\t{: /pass |\n:} |\n\n/gen lock=on as=char name={{char}} {{instructFirstOutput}} \n<Instruction>\n{{getvar::cotResponsePrompt}}\n</Instruction>\n{{instructFirstOutput}} |\n/setvar key=botResponse {{pipe}} ||\n\n/:AdventureTools.regex-Pile |\n\n/if left={{getvar::cotAPI}} right=\"\" rule=eq else={: \n\t/api {{getvar::cotAPI}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::cotModel}} right=\"\" rule=eq else={: \n\t/model {{getvar::cotModel}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::cotPreset}} right=\"\" rule=eq else={: \n\t/preset {{getvar::cotPreset}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::cotCTXTemplate}} right=\"\" rule=eq else={: \n\t/context {{getvar::cotCTXTemplate}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::cotInstructPreset}} right=\"\" rule=eq else={: \n\t/instruct {{getvar::cotInstructPreset}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::cotTokenizer}} right=\"\" rule=eq else={: \n\t/tokenizer {{getvar::cotTokenizer}} |\n\t:}\n\t{: /pass |\n:} |\n\n/echo Updating Tracker, please wait. |\n/gen lock=on length=1500 {{instructFirstOutput}} \n<Instruction>\n{{getvar::trackerPrompt}}\n</Instruction>\n```\n<template>\n{{getvar::trackerTemplate}}\n</template>\n```\n{{instructFirstOutput}} |\n/setvar key=UpdateTracker {{pipe}} |\n/echo Tracker updated! |\n\n/:AdventureTools.regex-Pile |\n\n/if left={{getvar::footerMode}} right=\"Disable Footer\" rule=eq else={:\n\t/swipes-add name={{char}} {{getvar::botResponse}}{{var::demarc}}**Time:** {{getvar::currentTime}}{{newline}}**Current Location:** {{getvar::currentLocation}}{{newline}}**Nearby Characters:** {{getvar::currentNearby}} |\n\t:}\n\t{: /swipes-add name={{char}} {{getvar::botResponse}} |\n:} |\n\n/addvar key=savedTracker {{getvar::UpdateTracker}} ||\n\n/setvar key=\"messageMode\" Plus |\n/flushvar botResponse |\n/flushvar botLogic |\n/flushvar tempTrackerList |\n/flushvar currentObjects |\n/flushvar currentTime |\n/flushvar currentLocation |\n/flushvar currentNearby |\n/flushvar regenNum |\n\n/unhide {{getvar::lastBotMessageID}} |",
            "preventAutoExecute": true,
            "showLabel": false,
            "title": ""
        },
        {
            "automationId": "",
            "contextList": [],
            "executeOnAi": false,
            "executeOnChatChange": false,
            "executeOnGroupMemberDraft": false,
            "executeOnStartup": false,
            "executeOnUser": false,
            "id": 35,
            "isHidden": false,
            "label": "⟴ Add...",
            "message": "/parser-flag STRICT_ESCAPING on ||\n\n/if left={{getvar::lorebookName}} right=\"\" rule=eq {: \n\t/wi-list-books |\n\t/buttons labels={{pipe}} Select the lorebook you'd like to use to create the entry. If the one you'd like isn't shown, cancel and make sure it's active. |\n\t/if left={{pipe}} right=\"\" rule=eq \n\t\telse=\"/setvar key=lorebookName {{pipe}}\" \n\t\"/abort\" \n:} |\n\n/if left={{getvar::toolsVersion}} right=\"\" rule=eq {: \n\t/buttons labels=[\"Modern Version\", \"Fantasy Version\"] Select which version you'd like to use |\n\t/if left={{pipe}} right=\"\" rule=eq \n\telse={: /setvar key=toolsVersion {{pipe}} |\n\t\t/pass :}\n\t\t\"/abort\" |\n:} |\n\n/buttons labels=[\"Add Custom NPC\", \"Add Encountered NPC\", \"Add/Update Other\"] What would you like to add? |\n/setvar key=\"menuSelect\" {{pipe}} ||\n\n/if left={{getvar::menuSelect}} right=\"\" rule=eq else={:\n\t/pass |\n\t:}\n\t/abort |\n:} |\n\n/if left={{getvar::menuSelect}} right=\"Add Custom NPC\" rule=eq {: \n\t/if left={{getvar::toolsVersion}} right=\"Fantasy Version\" rule=eq else=\"/:AdventureTools.Add-Custom-NPC\" \n\t\"/:AdventureTools.Add-Custom-NPC-Fantasy\" |\n:} |\n\n/if left={{getvar::menuSelect}} right=\"Add Encountered NPC\" rule=eq {: \n\t/if left={{getvar::toolsVersion}} right=\"Fantasy Version\" rule=eq else=\"/:AdventureTools.Add-Encountered-NPC\" \n\t\"/:AdventureTools.Add-Encountered-NPC-Fantasy\" |\n:} |\n\n/if left={{getvar::menuSelect}} right=\"Add/Update Other\" rule=eq \"/run AdventureTools.Add-Update Other\" |",
            "preventAutoExecute": true,
            "showLabel": false,
            "title": "Add/Edit lorebook info"
        },
        {
            "automationId": "",
            "contextList": [],
            "executeOnAi": false,
            "executeOnChatChange": false,
            "executeOnGroupMemberDraft": false,
            "executeOnStartup": false,
            "executeOnUser": false,
            "id": 27,
            "isHidden": true,
            "label": "Add-Custom-NPC",
            "message": "/parser-flag STRICT_ESCAPING on ||\n\n/if left={{getvar::lorebookName}} right=\"\" rule=eq {: \n\t/wi-list-books |\n\t/buttons labels={{pipe}} Select the lorebook you'd like to use to create the entry. If the one you'd like isn't shown, cancel and make sure it's active. |\n\t/if left={{pipe}} right=\"\" rule=eq \n\t\telse=\"/setvar key=lorebookName {{pipe}}\" \n\t\t\"/abort\" \n:} |\n\n/input Enter the character's first name |\n/if left={{pipe}} right=\"\" rule=eq \n\telse=\"/setvar key=charFirstName {{pipe}}\" \n\t\"/abort\" |\n\n/findentry file={{getvar::lorebookName}} field=key \"{{getvar::charFirstName}}\" |\n/if left={{pipe}} right=\"\" rule=neq\n\t{: /buttons labels=[\"I understand\"] {{getvar::charFirstName}} already exists. Please choose a different name | \n\t/abort |\n:} |\n\n/input Enter the character's last name |\n/if left={{pipe}} right=\"\" rule=eq \n\telse=\"/setvar key=charLastName {{pipe}}\" \n\t\"/abort\" |\n\n/input Describe the character's appearance |\n/if left={{pipe}} right=\"\" rule=eq \n\telse=\"/setvar key=inputAppearance {{pipe}}\" \n\t\"/abort\" |\n\n/let \"mbtiButtons\" [\"ISTJ\", \"ISFJ\", \"INFJ\", \"INTJ\", \"ISTP\", \"ISFP\", \"INFP\", \"INTP\", \"ESTP\", \"ESFP\", \"ENFP\", \"ENTP\", \"ESTJ\", \"ESFJ\", \"ENFJ\", \"ENTJ\", \"Pick one for me\"]|\n\n/buttons labels=\"{{var::mbtiButtons}}\" Choose a MBTI type for the character. If you don't know what this is, choose 'Pick one for me' |\n/if left={{pipe}} right=\"\" rule=eq \n\telse=\"/setvar key=inputMBTI {{pipe}}\" \n\t\"/abort\" |\n\n/input Describe the character's personality |\n/if left={{pipe}} right=\"\" rule=eq \n\telse=\"/setvar key=inputPersonality {{pipe}}\" \n\t\"/abort\" |\n\n/input If you'd like to customise the character's family, list out family members here. If you'd like the AI to fill it in, you can type 'make it up for me.' Suggested format example: Jake (Father, 47), Lisa (Mother, 45), Trent (Older Brother, 24) |\n/if left={{pipe}} right=\"\" rule=eq \n\telse=\"/setvar key=charFamily {{pipe}}\" \n\t\"/abort\" |\n\n/input List any external relationships you'd like the character to have, such as romantic relationships, friends, colleagues, etc. |\n/if left={{pipe}} right=\"\" rule=eq \n\telse=\"/setvar key=charRelationshits {{pipe}}\" \n\t\"/abort\" |\n\n/input Describe the kind of background you'd like to write |\n/if left={{pipe}} right=\"\" rule=eq \n\telse=\"/setvar key=bgInput {{pipe}}\" \n\t\"/abort\" |\n\n/let \"demarc\" {{newline}}{{newline}}---{{newline}}{{newline}} |\n/let \"hobbyList\" Example Hobbies: Acting, Baking, Bowling, Comedy, Cooking, Cross-stitch, DJing, Dancing, Fishing, Fitness, Gardening, Gemology, Home Improvement/Repair, Horse Riding, Playing an Instrument: (InstrumentNameHere), Knitting, Media Production, Mischief, Mixology, Wine Making, Visual Art: (Medium Type Here, e.g. anime, painting, watercolour), Photography, Programming, Recreational Drugs, Research & Debate, Robotics, Rock Climbing, Rocket Science, Singing, Skiing, Snowboarding, Social Media, Video Gaming, Watching <Media Type Here, e.g. anime, action films, romcoms, cooking shows, etc.>, Wellness, Writing |\n/let \"colourList\" Example Colours: Black, Blue, Brown, Gray, Green, Orange, Pink, Purple, Red, White, Yellow |\n/let \"musicList\" Example Music Genres: Alternative Rock, Americana, Backyard, Baroque, Blues, Carnaval Beats, Classical, Cottagecore, Country, Christmas Music, Easy Listening, Electronica, Gospel, Meditation, Hip-Hop, Tropical Music, Japanese Folk, Kids, Jazz, Latin, Latin Pop, Lullabies, Metal, New Age, NuDisco, Pop, R&B, Ranch, Retro, Romance, Indie, Spooky, Strange Tunes, Summer Strut, Tween Pop, World |\n/let \"fashionList\" Example Fashion Types: Basics, Boho, Country, Hipster, Outdoorsy, Polished, Preppy, Rocker, Streetwear |\n/let \"socialList\" Affection, Arguments, Complaints, Compliments, Insults, Deception, Deep Thoughts, Discussing Hobbies, Discussing Interests, Flirtation, Gossip, Jokes, Malicious Interactions, Physical Intimacy (Romantic), Potty Humour, Pranks, Silly Behaviour, Small Talk, Stories |\n/let \"traitList\" Ambitionless, Ambitious, Argumentative, Intellectual, Egotistical, Emotional, Family-Motivated, Funny, Hard-Working, High Energy, Homebody, Idealist, Nature, Optimistic, Pessimistic, Pet, Rascal, Romance, Spirited, Cheerful, Childish, Clumsy, Creative, Erratic,  Flirty, Genius, Gloomy, Goofball, High Maintenance, Hot-Headed, Paranoid, Self-Assured, Squeamish, Unflirty, Wise, Art Lover, Bookworm, Dance Machine, Foodie, Geek, Outdoorsy, Handicrafter, Music Lover, Recycle Disciple, Active, Adventurous, Glutton, Green Fiend, Kleptomaniac, Lactose Intolerant, Lazy, Materialistic, Neat, Overachiever, Perfectionist, Rancher, Slob, Vegetarian, Animal Enthusiast, Bro, Cat Lover, Cringe, Dog Lover, Evil, Generous, Good, Hates Children, Horse Lover, Insider, Jealous, Loner, Loyal, Mean, Noncommittal, Nosy, Outgoing, Party Animal, Proper, Self-Absorbed, Snob, Socially Awkward, Responsible, Irresponsible, Good Manners, Bad Manners, Emotional Control, Uncontrolled Emotions, Mediator, Compassionate, Insensitive |\n/let \"mbtiList\" ISTJ, ISFJ, INFJ, INTJ, ISTP, ISFP, INFP, INTP, ESTP, ESFP, ENFP, ENTP, ESTJ, ESFJ, ENFJ, ENTJ |\n\n/echo Creating your character, please wait! |\n\n/if left={{getvar::charAPI}} right=\"\" rule=eq else={: \n\t/api {{getvar::charAPI}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::charModel}} right=\"\" rule=eq else={: \n\t/model {{getvar::charModel}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::charPreset}} right=\"\" rule=eq else={: \n\t/preset {{getvar::charPreset}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::charCTXTemplate}} right=\"\" rule=eq else={: \n\t/context {{getvar::charCTXTemplate}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::charInstructPreset}} right=\"\" rule=eq else={: \n\t/instruct {{getvar::charInstructPreset}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::charTokenizer}} right=\"\" rule=eq else={: \n\t/tokenizer {{getvar::charTokenizer}} |\n\t:}\n\t{: /pass |\n:} |\n\n/gen lock=on name={{char}} {{instructInput}} \n<Instruction>\nYou've been tasked with creating a character. With the name \"{{getvar::charFirstName}} {{getvar::charLastName}}\", {{user}}'s appearance input: \"{{getvar::inputAppearance}}\", the personality described as: \"{{getvar::inputPersonality}}\", the provided family details of: \"{{getvar::charFamily}}\" and a list of relationships as: \"{{getvar::charRelationshits}}\", create the basics of an authentic and realistic char that aligns with it. Remember to follow the preceding info given to you. If information was not provided for fields, make it up as long as it aligns with the character. The lists are not conclusive, and you may create new items in the different categories if they match what the char would like/dislike. ONLY OUTPUT THE CHAR BASICS AND FOLLOW THE TEMPLATE SYNTAX EXACTLY, NOTHING ELSE. \n</Instruction>\n```\n<template>\n**Full Name:** {{newline}}**Nickname(s)/Alias(es):**{{newline}}**Age:** {{newline}}**Gender:** {{newline}}**Race:** {{newline}}**Sexuality:** {{newline}}**Height:** {{newline}}**Weight:** {{newline}}**Appearance:** (follow ``{{getvar::inputAppearance}}``. LIST BODY FEATURES ONLY. If any of the following details were not included: body type, skin tone, eye colour, and hair colour/style/cut- add them to the appearance){{newline}}**Occupation:** {{newline}}**Hometown:** {{newline}}**Family:** {{getvar::charFamily}} <List family member first names with their relationship to the char in parentheses and always list parents first, e.g. <father's name> (Father), <mother's name> (Mother)>>{{newline}}**Relationships:** {{getvar::charRelationshits}} {{newline}}**MBTI Type:** {{getvar::inputMBTI}}{{newline}}**Personality Traits:** (Choose 5 - 8) {{var::traitList}}{{newline}}**Speech:** (how his/her voice sounds, dialect, accent, etc.){{var::demarc}}# Preferences {{newline}}{{newline}}**Hobbies:** (Choose 1 - 4) {{var::hobbyList}} {{newline}}**Disliked Hobbies:** (Choose 1 - 3) {{var::hobbyList}} {{newline}}**Fav. Colour(s):** (Choose 1 - 3) {{var::colourList}} {{newline}}**Disliked Colours:** (Choose 1 - 3) {{var::colourList}} {{newline}}**Fav. Food(s):**{{newline}}**Disliked Food(s):**{{newline}}**Fav. Drink(s):**{{newline}}**Disliked Drinks:**{{newline}}**Liked Music:** (Choose 1 - 4) {{var::musicList}} {{newline}}**Disliked Music:** (Choose 1 - 3) {{var::musicList}} {{newline}}**Liked Fashions:** (Choose 1 - 3) {{var::fashionList}} {{newline}}**Disliked Fashions:** (Choose 1 - 3) {{var::fashionList}} {{newline}}**Liked Social Interactions:** (Choose 1 - 3) {{var::socialList}} {{newline}}**Disliked Social Interactions:** (Choose 1 - 3) {{var::socialList}} {{newline}}**Liked Personality Traits:** (Choose 1 - 3) {{var::traitList}} {{newline}}**Disliked Personality Traits:** (Choose 1 - 3) {{var::traitList}}{{newline}}**Insecurities:**{{newline}}**Deep-Rooted Fears:** {{newline}}**Personality Summary:** \n</template>\n```\n\n{{instructFirstOutput}} |\n/setvar key=\"charProfile\" {{pipe}} |\n\n/re-replace var=charProfile find=\"/\\<(.*)\\>/gm\" replace={{noop}} {{getvar::charProfile}} |\n/setvar key=charProfile {{pipe}} ||\n/re-replace var=charProfile find=\"/\\`/gm\" replace={{noop}} {{getvar::charProfile}} |\n/setvar key=charProfile {{pipe}} ||\n\n/delay 2000 |\n/gen lock=on name={{char}} {{instructInput}} You've been tasked with writing a description for a char. With \"{{getvar::charProfile}}\" in mind, write an intricately detailed and engaging physical description for the char using a novel's pace and the present-tense. If information is missing, you may fill in new information as you see fit, as long as it aligns with the char. ONLY write physical features. Start the description off in a manner similar to, '<first name> is/has <general desc here>' and then elaborate further in prose. Be sure to describe the char as if they were nude in a portrait. You do not need to provide any headers or titles; that will be added later. Only output prose for the char's physical description within a single paragraph, nothing else. |\n/let charAppearance {{pipe}} |\n\n/delay 2000 |\n/gen lock=on name={{char}} {{instructInput}} Now you've been tasked with writing a background for a char. With ```{{newline}}{{getvar::charProfile}}{{newline}}```{{newline}}```{{newline}}{{var::charAppearance}}{{newline}}``` and these directions from {{user}}: ```{{newline}}{{getvar::bgInput}}{{newline}}``` in mind, write an intricately detailed and engaging background for the char. Cover the basics, like where the char was born, income class, and how he/she developed his/her hobbies and interests. Be sure to include at least one of the following plot elements: plot twist, mentor figure, traumatic event, inspirational event, and an antagonist. Also include elements of the character's personality described as \"{{getvar::inputPersonality}}\". Remember, be logically consistent and make sure the background makes sense with the information provided, writing each paragraph in chronological order. You do not need to provide any headers or titles; that will be added later. Keep the response under 800 tokens. ONLY OUTPUT THE CHAR BACKGROUND, NOTHING ELSE. |\n/let charBackground {{pipe}} |\n\n/let completeChar [# {{getvar::charFirstName}}'s Char Sheet {{newline}}{{newline}}{{getvar::charProfile}}{{var::demarc}}# Physical Description{{newline}}{{newline}}{{var::charAppearance}}{{var::demarc}}# Background{{newline}}{{newline}}{{var::charBackground}}] |\n\n/createentry file={{getvar::lorebookName}} key=\"{{getvar::charFirstName}}\" |\n/findentry file={{getvar::lorebookName}} field=key \"{{getvar::charFirstName}}\" |\n/let dbUid2 {{pipe}} ||\n/setentryfield file={{getvar::lorebookName}} uid={{var::dbUid2}} field=comment Char Info - {{getvar::charFirstName}} {{getvar::charLastName}} |\n/setentryfield file={{getvar::lorebookName}} uid={{var::dbUid2}} field=content {{var::completeChar}} |\n/setentryfield file={{getvar::lorebookName}} uid={{var::dbUid2}} field=vectorized true | \n/setentryfield file={{getvar::lorebookName}} uid={{var::dbUid2}} field=position 4 | \n/setentryfield file={{getvar::lorebookName}} uid={{var::dbUid2}} field=role 1 | \n/setentryfield file={{getvar::lorebookName}} uid={{var::dbUid2}} field=depth 2 |\n\n/echo {{getvar::charFirstName}} {{getvar::charLastName}} created successfully! |\n\n/flushvar charFirstName |\n/flushvar charLastName |\n/flushvar inputAppearance |\n/flushvar inputPersonality |\n/flushvar charFamily |\n/flushvar charRelationshits |\n/flushvar bgInput |\n/flushvar inputMBTI |\n/flushvar charProfile |",
            "preventAutoExecute": true,
            "showLabel": false,
            "title": ""
        },
        {
            "automationId": "",
            "contextList": [],
            "executeOnAi": false,
            "executeOnChatChange": false,
            "executeOnGroupMemberDraft": false,
            "executeOnStartup": false,
            "executeOnUser": false,
            "id": 15,
            "isHidden": true,
            "label": "Add-Encountered-NPC",
            "message": "/parser-flag STRICT_ESCAPING on ||\n\n/if left={{getvar::lorebookName}} right=\"\" rule=eq {: \n\t/wi-list-books |\n\t/buttons labels={{pipe}} Select the lorebook you'd like to use to create the entry. If the one you'd like isn't shown, cancel and make sure it's active. |\n\t/if left={{pipe}} right=\"\" rule=eq \n\t\telse=\"/setvar key=lorebookName {{pipe}}\" \n\t\t\"/abort\" \n:} |\n\n/input Enter the name of the encountered character we're creating |\n/if left={{pipe}} right=\"\" rule=eq \n\telse=\"/setvar key=charName {{pipe}}\" \n\t\"/abort\" |\n\n/findentry file={{getvar::lorebookName}} field=key \"{{getvar::charName}}\" |\n/if left={{pipe}} right=\"\" rule=neq\n\t{: /buttons labels=[\"I understand\"] {{getvar::charName}} already exists. Please choose a different name | \n\t/abort |\n:} |\n\n/if left={{getvar::charAPI}} right=\"\" rule=eq else={: \n\t/api {{getvar::charAPI}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::charModel}} right=\"\" rule=eq else={: \n\t/model {{getvar::charModel}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::charPreset}} right=\"\" rule=eq else={: \n\t/preset {{getvar::charPreset}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::charCTXTemplate}} right=\"\" rule=eq else={: \n\t/context {{getvar::charCTXTemplate}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::charInstructPreset}} right=\"\" rule=eq else={: \n\t/instruct {{getvar::charInstructPreset}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::charTokenizer}} right=\"\" rule=eq else={: \n\t/tokenizer {{getvar::charTokenizer}} |\n\t:}\n\t{: /pass |\n:} |\n\n/let \"demarc\" {{newline}}{{newline}}---{{newline}}{{newline}} |\n/let \"hobbyList\" Example Hobbies: Acting, Baking, Bowling, Comedy, Cooking, Cross-stitch, DJing, Dancing, Fishing, Fitness, Gardening, Gemology, Home Improvement/Repair, Horse Riding, Playing an Instrument: (InstrumentNameHere), Knitting, Media Production, Mischief, Mixology, Wine Making, Visual Art: (Medium Type Here, e.g. anime, painting, watercolour), Photography, Programming, Recreational Drugs, Research & Debate, Robotics, Rock Climbing, Rocket Science, Singing, Skiing, Snowboarding, Social Media, Video Gaming, Watching <Media Type Here, e.g. anime, action films, romcoms, cooking shows, etc.>, Wellness, Writing |\n/let \"colourList\" Example Colours: Black, Blue, Brown, Gray, Green, Orange, Pink, Purple, Red, White, Yellow |\n/let \"musicList\" Example Music Genres: Alternative Rock, Americana, Backyard, Baroque, Blues, Carnaval Beats, Classical, Cottagecore, Country, Christmas Music, Easy Listening, Electronica, Gospel, Meditation, Hip-Hop, Tropical Music, Japanese Folk, Kids, Jazz, Latin, Latin Pop, Lullabies, Metal, New Age, NuDisco, Pop, R&B, Ranch, Retro, Romance, Indie, Spooky, Strange Tunes, Summer Strut, Tween Pop, World |\n/let \"fashionList\" Example Fashion Types: Basics, Boho, Country, Hipster, Outdoorsy, Polished, Preppy, Rocker, Streetwear |\n/let \"socialList\" Affection, Arguments, Complaints, Compliments, Insults, Deception, Deep Thoughts, Discussing Hobbies, Discussing Interests, Flirtation, Gossip, Jokes, Malicious Interactions, Physical Intimacy (Romantic), Potty Humour, Pranks, Silly Behaviour, Small Talk, Stories |\n/let \"traitList\" Ambitionless, Ambitious, Argumentative, Intellectual, Egotistical, Emotional, Family-Motivated, Funny, Hard-Working, High Energy, Homebody, Idealist, Nature, Optimistic, Pessimistic, Pet, Rascal, Romance, Spirited, Cheerful, Childish, Clumsy, Creative, Erratic,  Flirty, Genius, Gloomy, Goofball, High Maintenance, Hot-Headed, Paranoid, Self-Assured, Squeamish, Unflirty, Wise, Art Lover, Bookworm, Dance Machine, Foodie, Geek, Outdoorsy, Handicrafter, Music Lover, Recycle Disciple, Active, Adventurous, Glutton, Green Fiend, Kleptomaniac, Lactose Intolerant, Lazy, Materialistic, Neat, Overachiever, Perfectionist, Rancher, Slob, Vegetarian, Animal Enthusiast, Bro, Cat Lover, Cringe, Dog Lover, Evil, Generous, Good, Hates Children, Horse Lover, Insider, Jealous, Loner, Loyal, Mean, Noncommittal, Nosy, Outgoing, Party Animal, Proper, Self-Absorbed, Snob, Socially Awkward, Responsible, Irresponsible, Good Manners, Bad Manners, Emotional Control, Uncontrolled Emotions, Mediator, Compassionate, Insensitive |\n/let \"mbtiList\" ISTJ, ISFJ, INFJ, INTJ, ISTP, ISFP, INFP, INTP, ESTP, ESFP, ENFP, ENTP, ESTJ, ESFJ, ENFJ, ENTJ |\n\n/echo Creating entry for {{getvar::charName}}! |\n/gen {{instructInput}}\n<Instruction>\nYou've been tasked with creating the character named {{getvar::charName}}. Considering the chat history and {{lastMessage}}, create the basics of an authentic and realistic char that aligns with it. If information was not provided for fields, improvise with your best educated guess, as you imagine it would be congruent with the character. MAKE SURE THE NAME YOU WRITE MATCHES WITH THIS: {{getvar::charName}}, AS WE ARE CREATING A CHAR THAT ALREADY EXISTS IN THE ADVENTURE. **Some people can be secretly (or not so secretly) evil, mean, or rude. Take this into consideration for creating a complex character.** The lists are not conclusive, and you may create new items in the different categories if they match what the char would like/dislike. You do not need to provide any headers or titles; that will be added later. ONLY OUTPUT THE CHAR BASICS AND FOLLOW THE TEMPLATE SYNTAX EXACTLY, NOTHING ELSE.\n</Instruction>\n```\n<template>\nTEMPLATE: **Full Name:** {{newline}}**Nickname(s)/Alias(es):**{{newline}}**Age:** {{newline}}**Gender:** {{newline}}**Race:** {{newline}}**Sexuality:** {{newline}}**Height:** {{newline}}**Weight:** {{newline}}**Appearance:** (BODY FEATURES ONLY. Include body type, skin tone, eye colour, hair colour/style/cut){{newline}}**Occupation:** {{newline}}**Hometown:** make one up for me {{newline}}**Family:** make it up for me <List family member first names with their relationship to the char in parentheses and always list parents first, e.g. <father's name> (Father), <mother's name> (Mother)>>{{newline}}**MBTI Type:** {{var::mbtiList}}{{newline}}**Personality Traits:** (Choose up to 5) {{var::traitList}}{{newline}}**Speech:** (how his/her voice sounds, dialect, accent, etc.){{var::demarc}}# Preferences {{newline}}{{newline}}**Hobbies:** (Choose 1 - 4) {{var::hobbyList}} {{newline}}**Disliked Hobbies:** (Choose 1 - 3) {{var::hobbyList}} {{newline}}**Fav. Colour(s):** (Choose 1 - 3) {{var::colourList}} {{newline}}**Disliked Colours:** (Choose 1 - 3) {{var::colourList}} {{newline}}**Fav. Food(s):**{{newline}}**Disliked Food(s):**{{newline}}**Fav. Drink(s):**{{newline}}**Disliked Drinks:**{{newline}}**Liked Music:** (Choose 1 - 4) {{var::musicList}} {{newline}}**Disliked Music:** (Choose 1 - 3) {{var::musicList}} {{newline}}**Liked Fashions:** (Choose 1 - 3) {{var::fashionList}} {{newline}}**Disliked Fashions:** (Choose 1 - 3) {{var::fashionList}} {{newline}}**Liked Social Interactions:** (Choose 1 - 3) {{var::socialList}} {{newline}}**Disliked Social Interactions:** (Choose 1 - 3) {{var::socialList}} {{newline}}**Liked Personality Traits:** (Choose 1 - 3) {{var::traitList}} {{newline}}**Disliked Personality Traits:** (Choose 1 - 3) {{var::traitList}}{{newline}}**Insecurities:**{{newline}}**Deep-Rooted Fears:** {{newline}}**Personality Summary:** \n</template>\n```\n\n{{instructFirstOutput}} |\n/setvar key=\"charProfile\" {{pipe}} |\n\n/re-replace var=charProfile find=\"/\\<(.*)\\>/gm\" replace={{noop}} {{getvar::charProfile}} |\n/setvar key=charProfile {{pipe}} ||\n/re-replace var=charProfile find=\"/\\`/gm\" replace={{noop}} {{getvar::charProfile}} |\n/setvar key=charProfile {{pipe}} ||\n\n/gen lock=on name={{char}} {{instructInput}} Now you've been tasked with writing a background for a char. With ```{{newline}}{{getvar::charProfile}}{{newline}}``` in mind, write an intricately detailed and engaging background for the char. Cover the basics, like where the char was born, income class, and how he/she developed his/her hobbies and interests. Be sure to include at least two of the following plot elements: plot twist, mentor figure, traumatic event, inspirational event, and an antagonist. You do not need to provide any headers or titles; that will be added later. Keep the response under 800 tokens. ONLY OUTPUT THE CHAR BACKGROUND, NOTHING ELSE. |\n/let \"charBackground\" {{pipe}} |\n\n/setvar key=\"completeChar\" [Char Info: {{getvar::charName}}{{newline}}{{newline}}{{getvar::charProfile}}{{var::demarc}}# Background{{newline}}{{newline}}{{var::charBackground}}] |\n\n/re-replace var=completeChar find=\"/\\<(.*)\\>/gm\" replace={{noop}} {{getvar::completeChar}} |\n/setvar key=completeChar {{pipe}} ||\n/re-replace var=completeChar find=\"/\\`/gm\" replace={{noop}} {{getvar::completeChar}} |\n/setvar key=completeChar {{pipe}} ||\n\n/createentry file={{getvar::lorebookName}} key={{getvar::charName}} |\n/findentry file={{getvar::lorebookName}} field=key \"{{getvar::charName}}\" |\n/let \"charNameUID\" {{pipe}} ||\n/setentryfield file={{getvar::lorebookName}} uid={{var::charNameUID}} field=content {{getvar::completeChar}} |\n/setentryfield file={{getvar::lorebookName}} uid={{var::charNameUID}} field=comment Char Info - {{getvar::charName}} |\n/setentryfield file={{getvar::lorebookName}} uid={{var::charNameUID}} field=vectorized true |\n/setentryfield file={{getvar::lorebookName}} uid={{var::charNameUID}} field=position 4 |\n/setentryfield file={{getvar::lorebookName}} uid={{var::charNameUID}} field=role 1 |\n/setentryfield file={{getvar::lorebookName}} uid={{var::charNameUID}} field=depth 2 |\n\n/echo Lorebook entry for {{getvar::charName}} created successfully! |\n\n/flushvar charName |\n/flushvar charProfile |",
            "preventAutoExecute": true,
            "showLabel": false,
            "title": ""
        },
        {
            "automationId": "",
            "contextList": [],
            "executeOnAi": false,
            "executeOnChatChange": false,
            "executeOnGroupMemberDraft": false,
            "executeOnStartup": false,
            "executeOnUser": false,
            "id": 46,
            "isHidden": true,
            "label": "Add-Custom-NPC-Fantasy",
            "message": "/if left={{getvar::lorebookName}} right=\"\" rule=eq {: \n\t/wi-list-books |\n\t/buttons labels={{pipe}} Select the lorebook you'd like to use. If the one you'd like isn't shown, cancel and make sure it's active. |\n\t/if left={{pipe}} right=\"\" rule=eq \n\t\telse=\"/setvar key=lorebookName {{pipe}}\" \n\t\t\"/abort\" \n:} |\n\n/parser-flag STRICT_ESCAPING on ||\n\n/input Enter the character's first name |\n/if left={{pipe}} right=\"\" rule=eq \n\telse=\"/setvar key=charFirstName {{pipe}}\" \n\t\"/abort\" |\n\n/findentry file={{getvar::lorebookName}} field=key \"{{getvar::charFirstName}}\" |\n/if left={{pipe}} right=\"\" rule=neq\n\t{: /buttons labels=[\"I understand\"] {{getvar::charFirstName}} already exists. Please choose a different name | \n\t/abort |\n:} |\n\n/input Enter the character's last name |\n/if left={{pipe}} right=\"\" rule=eq \n\telse=\"/setvar key=charLastName {{pipe}}\" \n\t\"/abort\" |\n\n/input Describe the character's appearance |\n/if left={{pipe}} right=\"\" rule=eq \n\telse=\"/setvar key=inputAppearance {{pipe}}\" \n\t\"/abort\" |\n\n/let \"mbtiButtons\" [\"ISTJ\", \"ISFJ\", \"INFJ\", \"INTJ\", \"ISTP\", \"ISFP\", \"INFP\", \"INTP\", \"ESTP\", \"ESFP\", \"ENFP\", \"ENTP\", \"ESTJ\", \"ESFJ\", \"ENFJ\", \"ENTJ\", \"Pick one for me\"]|\n\n/buttons labels=\"{{var::mbtiButtons}}\" Choose a MBTI type for the character. If you don't know what this is, choose 'Pick one for me' |\n/if left={{pipe}} right=\"\" rule=eq \n\telse=\"/setvar key=inputMBTI {{pipe}}\" \n\t\"/abort\" |\n\n/input Describe the character's personality |\n/if left={{pipe}} right=\"\" rule=eq \n\telse=\"/setvar key=inputPersonality {{pipe}}\" \n\t\"/abort\" |\n\n/input If you'd like to customise the character's family, list out family members here. If you'd like the AI to fill it in, you can type 'make it up for me.' Suggested format example: Jake (Father, 47), Lisa (Mother, 45), Trent (Older Brother, 24) |\n/if left={{pipe}} right=\"\" rule=eq \n\telse=\"/setvar key=charFamily {{pipe}}\" \n\t\"/abort\" |\n\n/input List any external relationships you'd like the character to have, such as romantic relationships, friends, colleagues, etc. |\n/if left={{pipe}} right=\"\" rule=eq \n\telse=\"/setvar key=charRelationshits {{pipe}}\" \n\t\"/abort\" |\n\n/input Describe the kind of background you'd like to write |\n/if left={{pipe}} right=\"\" rule=eq \n\telse=\"/setvar key=bgInput {{pipe}}\" \n\t\"/abort\" |\n\n/let \"demarc\" {{newline}}{{newline}}---{{newline}}{{newline}} |\n/let \"hobbyList\" Example Hobbies: Archery, Swordsmanship, Magic Duels, Alchemy, Arcana, Divine Arts, Storytelling, Chess, Board Games, Card Games, Jousting, Animal Training (Animal Type Here), Woodworking, Metallurgy, Music Composition, Weapon Collecting, Astronomy, Astrology, Tarot Reading, Palmistry, Meditation, Archery Tournaments, Hunting, Treasure Hunting, Puzzle Solving, Cryptography, Inventing Gadgets, Spying, Disguise Crafting, Acting, Baking, Comedy, Cooking, Dancing, Fishing, Fitness, Gardening, Gemology, Home Improvement/Repair, Horse Riding, Playing an Instrument: (InstrumentNameHere), Knitting, Mischief, Mixology, Wine Making, Visual Art: (Medium Type Here, e.g. sketching, painting, watercolour, sculpting, pottery etc.), Recreational Drugs, Research & Debate, Rock Climbing, Singing, Watching Live Performances, Wellness, Writing |\n/let \"colourList\" Example Colours: Black, Blue, Brown, Gray, Green, Orange, Pink, Purple, Red, White, Yellow |\n/let \"socialList\" Affection, Arguments, Complaints, Compliments, Insults, Deception, Deep Thoughts, Discussing Hobbies, Discussing Interests, Flirtation, Gossip, Jokes, Malicious Interactions, Physical Intimacy (Romantic), Potty Humour, Pranks, Silly Behaviour, Small Talk, Stories |\n/let \"traitList\" Ambitionless, Ambitious, Argumentative, Intellectual, Egotistical, Emotional, Family-Motivated, Funny, Hard-Working, High Energy, Homebody, Idealist, Nature, Optimistic, Pessimistic, Pet, Rascal, Romantic, Spirited, Cheerful, Childish, Clumsy, Creative, Erratic,  Flirty, Genius, Gloomy, Goofball, High Maintenance, Hot-Headed, Paranoid, Self-Assured, Squeamish, Unflirty, Wise, Art Lover, Bookworm, Dance Machine, Foodie, Geek, Outdoorsy, Handicrafter, Music Lover, Active, Adventurous, Glutton, Green Fiend, Kleptomaniac, Lactose Intolerant, Lazy, Materialistic, Neat, Overachiever, Perfectionist, Rancher, Slob, Vegetarian, Animal Enthusiast, Cat Lover, Cringe, Dog Lover, Evil, Generous, Good, Hates Children, Horse Lover, Insider, Jealous, Loner, Loyal, Mean, Noncommittal, Nosy, Outgoing, Party Animal, Proper, Self-Absorbed, Snob, Socially Awkward, Responsible, Irresponsible, Good Manners, Bad Manners, Emotional Control, Uncontrolled Emotions, Mediator, Compassionate, Insensitive |\n/let \"mbtiList\" ISTJ, ISFJ, INFJ, INTJ, ISTP, ISFP, INFP, INTP, ESTP, ESFP, ENFP, ENTP, ESTJ, ESFJ, ENFJ, ENTJ |\n\n/echo Creating your character, please wait! |\n\n/if left={{getvar::charAPI}} right=\"\" rule=eq else={: \n\t/api {{getvar::charAPI}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::charModel}} right=\"\" rule=eq else={: \n\t/model {{getvar::charModel}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::charPreset}} right=\"\" rule=eq else={: \n\t/preset {{getvar::charPreset}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::charCTXTemplate}} right=\"\" rule=eq else={: \n\t/context {{getvar::charCTXTemplate}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::charInstructPreset}} right=\"\" rule=eq else={: \n\t/instruct {{getvar::charInstructPreset}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::charTokenizer}} right=\"\" rule=eq else={: \n\t/tokenizer {{getvar::charTokenizer}} |\n\t:}\n\t{: /pass |\n:} |\n\n/gen lock=on name={{char}} {{instructInput}} \n<Instruction>\nYou've been tasked with creating a character. With the name \"{{getvar::charFirstName}} {{getvar::charLastName}}\", {{user}}'s appearance input: \"{{getvar::inputAppearance}}\", the personality described as: \"{{getvar::inputPersonality}}\", the provided family details of: \"{{getvar::charFamily}}\" and a list of relationships as: \"{{getvar::charRelationshits}}\", create the basics of an authentic and realistic char that aligns with it. Remember to follow the preceding info given to you. If information was not provided for fields, make it up as long as it aligns with the character. The lists are not conclusive, and you may create new items in the different categories if they match what the char would like/dislike. ONLY OUTPUT THE CHAR BASICS AND FOLLOW THE TEMPLATE SYNTAX EXACTLY, NOTHING ELSE. \n</Instruction>\n\n```\n<template>\nTEMPLATE: **Full Name:** {{newline}}**Nickname(s)/Alias(es):**{{newline}}**Age:** {{newline}}**Gender:** {{newline}}**Race:** {{newline}}**Sexuality:** {{newline}}**Height:** {{newline}}**Weight:** {{newline}}**Appearance:** (follow ``{{getvar::inputAppearance}}``. LIST BODY FEATURES ONLY. If any of the following details were not included: body type, skin tone, eye colour, and hair colour/style/cut- add them to the appearance){{newline}}**Occupation:** {{newline}}**Hometown:** {{newline}}**Family:** {{getvar::charFamily}} <List family member first names with their relationship to the char in parentheses and always list parents first, e.g. <father's name> (Father), <mother's name> (Mother)>>{{newline}}**Relationships:** {{getvar::charRelationshits}} {{newline}}**MBTI Type:** {{getvar::inputMBTI}}{{newline}}**Personality Traits:** (Choose 5 - 8) {{var::traitList}}{{newline}}**Speech:** (how his/her voice sounds, dialect, accent, etc.){{var::demarc}}# Preferences {{newline}}{{newline}}**Hobbies:** (Choose 1 - 4) {{var::hobbyList}} {{newline}}**Disliked Hobbies:** (Choose 1 - 3) {{var::hobbyList}} {{newline}}**Fav. Colour(s):** (Choose 1 - 3) {{var::colourList}} {{newline}}**Disliked Colours:** (Choose 1 - 3) {{var::colourList}} {{newline}}**Fav. Food(s):**{{newline}}**Disliked Food(s):**{{newline}}**Fav. Drink(s):**{{newline}}**Disliked Drinks:**{{newline}}**Liked Music:** (Choose 1 - 4) {{newline}}**Disliked Music:** (Choose 1 - 3) {{newline}}**Liked Fashions:** (Choose 1 - 3) {{newline}}**Disliked Fashions:** (Choose 1 - 3) {{newline}}**Liked Social Interactions:** (Choose 1 - 3) {{var::socialList}} {{newline}}**Disliked Social Interactions:** (Choose 1 - 3) {{var::socialList}} {{newline}}**Liked Personality Traits:** (Choose 1 - 3) {{var::traitList}} {{newline}}**Disliked Personality Traits:** (Choose 1 - 3) {{var::traitList}}{{newline}}**Insecurities:**{{newline}}**Deep-Rooted Fears:** {{newline}}**Personality Summary:** {{newline}}\n</template>\n```\n{{instructFirstOutput}} |\n/setvar key=\"charProfile\" {{pipe}} |\n\n/re-replace var=charProfile find=\"/\\<(.*)\\>/gm\" replace={{noop}} {{getvar::charProfile}} |\n/setvar key=charProfile {{pipe}} ||\n/re-replace var=charProfile find=\"/\\`/gm\" replace={{noop}} {{getvar::charProfile}} |\n/setvar key=charProfile {{pipe}} ||\n\n/delay 2000 |\n/gen lock=on name={{char}} {{instructInput}} \n<Instruction>\nYou've been tasked with writing a description for a char. With \"{{getvar::charProfile}}\" in mind, write an intricately detailed and engaging physical description for the char using a novel's pace and the present-tense. If information is missing, you may fill in new information as you see fit, as long as it aligns with the char. ONLY write physical features. Start the description off in a manner similar to, '<first name> is/has <general desc here>' and then elaborate further in prose. Be sure to describe the char as if they were nude in a portrait. You do not need to provide any headers or titles; that will be added later. Only output prose for the char's physical description within a single paragraph, nothing else. \n</Instruction>\n|\n/let \"charAppearance\" {{pipe}} |\n\n/delay 2000 |\n/gen lock=on name={{char}} {{instructInput}} \n<Instruction>\nNow you've been tasked with writing a background for a char. With ```{{newline}}{{getvar::charProfile}}{{newline}}```{{newline}}```{{newline}}{{var::charAppearance}}{{newline}}``` and these directions from {{user}}: ```{{newline}}{{getvar::bgInput}}{{newline}}``` in mind, write an intricately detailed and engaging background for the char. Cover the basics, like where the char was born, income class, and how he/she developed his/her hobbies and interests. Be sure to include at least one of the following plot elements: plot twist, mentor figure, traumatic event, inspirational event, and an antagonist. Also include elements of the character's personality described as \"{{getvar::inputPersonality}}\". Remember, be logically consistent and make sure the background makes sense with the information provided, writing each paragraph in chronological order. You do not need to provide any headers or titles; that will be added later. Keep the response under 800 tokens. ONLY OUTPUT THE CHAR BACKGROUND, NOTHING ELSE.\n</Instruction>\n|\n/let \"charBackground\" {{pipe}} |\n\n/setvar key=\"completeChar\" [# {{getvar::charFirstName}}'s Char Sheet {{newline}}{{newline}}{{getvar::charProfile}}{{var::demarc}}# Physical Description{{newline}}{{newline}}{{var::charAppearance}}{{newline}}{{var::demarc}}# Background{{newline}}{{newline}}{{var::charBackground}}] |\n\n/re-replace var=completeChar find=\"/\\<(.*)\\>/gm\" replace={{noop}} {{getvar::completeChar}} |\n/setvar key=completeChar {{pipe}} ||\n/re-replace var=completeChar find=\"/\\`/gm\" replace={{noop}} {{getvar::completeChar}} |\n/setvar key=completeChar {{pipe}} ||\n\n/createentry file={{getvar::lorebookName}} key=\"{{getvar::charFirstName}}\" |\n/findentry file={{getvar::lorebookName}} field=key \"{{getvar::charFirstName}}\" |\n/let dbUid2 {{pipe}} ||\n/setentryfield file={{getvar::lorebookName}} uid={{var::dbUid2}} field=comment Char Info - {{getvar::charFirstName}} {{getvar::charLastName}} |\n/setentryfield file={{getvar::lorebookName}} uid={{var::dbUid2}} field=content {{getvar::completeChar}} |\n/setentryfield file={{getvar::lorebookName}} uid={{var::dbUid2}} field=vectorized true | \n/setentryfield file={{getvar::lorebookName}} uid={{var::dbUid2}} field=position 4 | \n/setentryfield file={{getvar::lorebookName}} uid={{var::dbUid2}} field=role 1 | \n/setentryfield file={{getvar::lorebookName}} uid={{var::dbUid2}} field=depth 2 |\n\n/echo {{getvar::charFirstName}} {{getvar::charLastName}} created successfully! |\n\n/flushvar charFirstName |\n/flushvar charLastName |\n/flushvar inputAppearance |\n/flushvar inputPersonality |\n/flushvar bgInput |\n/flushvar charFamily |\n/flushvar charRelationshits |\n/flushvar inputMBTI |\n/flushvar completeChar |\n/flushvar charProfile |",
            "preventAutoExecute": true,
            "showLabel": false,
            "title": ""
        },
        {
            "automationId": "",
            "contextList": [],
            "executeOnAi": false,
            "executeOnChatChange": false,
            "executeOnGroupMemberDraft": false,
            "executeOnStartup": false,
            "executeOnUser": false,
            "id": 48,
            "isHidden": true,
            "label": "Add-Encountered-NPC-Fantasy",
            "message": "/if left={{getvar::lorebookName}} right=\"\" rule=eq {: \n\t/wi-list-books |\n\t/buttons labels={{pipe}} Select the lorebook you'd like to use. If the one you'd like isn't shown, cancel and make sure it's active. |\n\t/if left={{pipe}} right=\"\" rule=eq \n\t\telse=\"/setvar key=lorebookName {{pipe}}\" \n\t\t\"/abort\" \n:} |\n\n/parser-flag STRICT_ESCAPING on ||\n\n/if left={{getvar::charPreset}} right=\"\" rule=eq {: /input Enter the name of your character generator text completion preset (NO SPACES ALLOWED). If you don't have one, click cancel and create one. This should be a chat text completion preset identical to your adventuring preset with a high amount of tokens allowed, such as 1K tokens | \n/if left={{pipe}} right=\"\" rule=eq \n\telse=\"/setvar key=charPreset {{pipe}}\" \n\t\"/abort\" :} |\n\n/input Enter the name of the encountered character we're creating |\n/if left={{pipe}} right=\"\" rule=eq \n\telse=\"/setvar key=charName {{pipe}}\" \n\t\"/abort\" |\n\n/findentry file={{getvar::lorebookName}} field=key \"{{getvar::charName}}\" |\n/if left={{pipe}} right=\"\" rule=neq\n\t{: /buttons labels=[\"I understand\"] {{getvar::charName}} already exists. Please choose a different name | \n\t/abort |\n:} |\n\n/if left={{getvar::charAPI}} right=\"\" rule=eq else={: \n\t/api {{getvar::charAPI}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::charModel}} right=\"\" rule=eq else={: \n\t/model {{getvar::charModel}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::charPreset}} right=\"\" rule=eq else={: \n\t/preset {{getvar::charPreset}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::charCTXTemplate}} right=\"\" rule=eq else={: \n\t/context {{getvar::charCTXTemplate}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::charInstructPreset}} right=\"\" rule=eq else={: \n\t/instruct {{getvar::charInstructPreset}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::charTokenizer}} right=\"\" rule=eq else={: \n\t/tokenizer {{getvar::charTokenizer}} |\n\t:}\n\t{: /pass |\n:} |\n\n/let \"demarc\" {{newline}}{{newline}}---{{newline}}{{newline}} |\n/let \"hobbyList\" Example Hobbies: Archery, Swordsmanship, Magic Duels, Alchemy, Arcana, Divine Arts, Storytelling, Chess, Board Games, Card Games, Jousting, Animal Training (Animal Type Here), Woodworking, Metallurgy, Music Composition, Weapon Collecting, Astronomy, Astrology, Tarot Reading, Palmistry, Meditation, Archery Tournaments, Hunting, Treasure Hunting, Puzzle Solving, Cryptography, Inventing Gadgets, Spying, Disguise Crafting, Acting, Baking, Comedy, Cooking, Dancing, Fishing, Fitness, Gardening, Gemology, Home Improvement/Repair, Horse Riding, Playing an Instrument: (InstrumentNameHere), Knitting, Mischief, Mixology, Wine Making, Visual Art: (Medium Type Here, e.g. sketching, painting, watercolour, sculpting, pottery etc.), Recreational Drugs, Research & Debate, Rock Climbing, Singing, Watching Live Performances, Wellness, Writing |\n/let \"colourList\" Example Colours: Black, Blue, Brown, Gray, Green, Orange, Pink, Purple, Red, White, Yellow |\n/let \"socialList\" Affection, Arguments, Complaints, Compliments, Insults, Deception, Deep Thoughts, Discussing Hobbies, Discussing Interests, Flirtation, Gossip, Jokes, Malicious Interactions, Physical Intimacy (Romantic), Potty Humour, Pranks, Silly Behaviour, Small Talk, Stories |\n/let \"traitList\" Ambitionless, Ambitious, Argumentative, Intellectual, Egotistical, Emotional, Family-Motivated, Funny, Hard-Working, High Energy, Homebody, Idealist, Nature, Optimistic, Pessimistic, Pet, Rascal, Romantic, Spirited, Cheerful, Childish, Clumsy, Creative, Erratic,  Flirty, Genius, Gloomy, Goofball, High Maintenance, Hot-Headed, Paranoid, Self-Assured, Squeamish, Unflirty, Wise, Art Lover, Bookworm, Dance Machine, Foodie, Geek, Outdoorsy, Handicrafter, Music Lover, Active, Adventurous, Glutton, Green Fiend, Kleptomaniac, Lactose Intolerant, Lazy, Materialistic, Neat, Overachiever, Perfectionist, Rancher, Slob, Vegetarian, Animal Enthusiast, Cat Lover, Cringe, Dog Lover, Evil, Generous, Good, Hates Children, Horse Lover, Insider, Jealous, Loner, Loyal, Mean, Noncommittal, Nosy, Outgoing, Party Animal, Proper, Self-Absorbed, Snob, Socially Awkward, Responsible, Irresponsible, Good Manners, Bad Manners, Emotional Control, Uncontrolled Emotions, Mediator, Compassionate, Insensitive |\n/let \"mbtiList\" ISTJ, ISFJ, INFJ, INTJ, ISTP, ISFP, INFP, INTP, ESTP, ESFP, ENFP, ENTP, ESTJ, ESFJ, ENFJ, ENTJ |\n\n/echo Creating entry for {{getvar::charName}}! |\n/gen {{instructInput}} \n<Instruction>\nYou're a genius character creator, writer, and psychologist. You've been tasked with creating the character named {{getvar::charName}}. Considering the chat history and {{lastMessage}}, create the basics of an authentic and realistic char that aligns with it. If information was not provided for fields, improvise with your best educated guess, as you imagine it would be congruent with the character. MAKE SURE THE NAME YOU WRITE MATCHES WITH THIS: {{getvar::charName}}, AS WE ARE CREATING A CHAR THAT ALREADY EXISTS IN THE ADVENTURE. **Some people can be secretly (or not so secretly) evil, mean, or rude. Take this into consideration for creating a complex character.** The lists are not conclusive, and you may create new items in the different categories if they match what the char would like/dislike. You do not need to provide any headers or titles; that will be added later. ONLY OUTPUT THE CHAR BASICS AND FOLLOW THE TEMPLATE SYNTAX EXACTLY, NOTHING ELSE.\n</Instruction>\n```\n<template>\n**Full Name:** {{newline}}**Nickname(s)/Alias(es):**{{newline}}**Age:** {{newline}}**Gender:** {{newline}}**Race:** {{newline}}**Sexuality:** {{newline}}**Height:** {{newline}}**Weight:** {{newline}}**Appearance:** (BODY FEATURES ONLY. Include body type, skin tone, eye colour, hair colour/style/cut){{newline}}**Occupation:** {{newline}}**Hometown:** make one up for me {{newline}}**Family:** make it up for me <List family member first names with their relationship to the char in parentheses and always list parents first, e.g. <father's name> (Father), <mother's name> (Mother)>>{{newline}}**MBTI Type:** {{var::mbtiList}}{{newline}}**Personality Traits:** (Choose up to 5) {{var::traitList}}{{newline}}**Speech:** (how his/her voice sounds, dialect, accent, etc.){{var::demarc}}# Preferences {{newline}}{{newline}}**Hobbies:** (Choose 1 - 4) {{var::hobbyList}} {{newline}}**Disliked Hobbies:** (Choose 1 - 3) {{var::hobbyList}} {{newline}}**Fav. Colour(s):** (Choose 1 - 3) {{var::colourList}} {{newline}}**Disliked Colours:** (Choose 1 - 3) {{var::colourList}} {{newline}}**Fav. Food(s):**{{newline}}**Disliked Food(s):**{{newline}}**Fav. Drink(s):**{{newline}}**Disliked Drinks:**{{newline}}**Liked Music:** (Choose 1 - 4)  {{newline}}**Disliked Music:** (Choose 1 - 3) {{newline}}**Liked Fashions:** (Choose 1 - 3) {{newline}}**Disliked Fashions:** (Choose 1 - 3) {{newline}}**Liked Social Interactions:** (Choose 1 - 3) {{var::socialList}} {{newline}}**Disliked Social Interactions:** (Choose 1 - 3) {{var::socialList}} {{newline}}**Liked Personality Traits:** (Choose 1 - 3) {{var::traitList}} {{newline}}**Disliked Personality Traits:** (Choose 1 - 3) {{var::traitList}}{{newline}}**Insecurities:**{{newline}}**Deep-Rooted Fears:** {{newline}}**Personality Summary:**\n</template>\n```\n{{instructFirstOutput}} |\n/setvar key=\"charProfile\" {{pipe}} |\n\n/re-replace var=charProfile find=\"/\\<(.*)\\>/gm\" replace={{noop}} {{getvar::charProfile}} |\n/setvar key=charProfile {{pipe}} ||\n/re-replace var=charProfile find=\"/\\`/gm\" replace={{noop}} {{getvar::charProfile}} |\n/setvar key=charProfile {{pipe}} ||\n\n/gen lock=on name={{char}} {{instructInput}} \n<Instruction>\nNow you've been tasked with writing a background for a char. With ```{{newline}}{{getvar::charProfile}}{{newline}}``` in mind, write an intricately detailed and engaging background for the char. Cover the basics, like where the char was born, income class, and how he/she developed his/her hobbies and interests. Be sure to include at least two of the following plot elements: plot twist, mentor figure, traumatic event, inspirational event, and an antagonist. You do not need to provide any headers or titles; that will be added later. Keep the response under 800 tokens. ONLY OUTPUT THE CHAR BACKGROUND, NOTHING ELSE. \n</Instruction>\n|\n/let \"charBackground\" {{pipe}} |\n\n/setvar key=\"completeChar\" [Char Info: {{getvar::charName}}{{newline}}{{newline}}{{getvar::charProfile}}{{var::demarc}}# Background{{newline}}{{newline}}{{var::charBackground}}] |\n\n/re-replace var=completeChar find=\"/\\<(.*)\\>/gm\" replace={{noop}} {{getvar::completeChar}} |\n/setvar key=completeChar {{pipe}} ||\n/re-replace var=completeChar find=\"/\\`/gm\" replace={{noop}} {{getvar::completeChar}} |\n/setvar key=completeChar {{pipe}} ||\n\n/createentry file={{getvar::lorebookName}} key={{getvar::charName}} |\n/findentry file={{getvar::lorebookName}} field=key \"{{getvar::charName}}\" |\n/let \"charNameUID\" {{pipe}} ||\n/setentryfield file={{getvar::lorebookName}} uid={{var::charNameUID}} field=content {{getvar::completeChar}} |\n/setentryfield file={{getvar::lorebookName}} uid={{var::charNameUID}} field=comment Char Info - {{getvar::charName}} |\n/setentryfield file={{getvar::lorebookName}} uid={{var::charNameUID}} field=vectorized true |\n/setentryfield file={{getvar::lorebookName}} uid={{var::charNameUID}} field=position 4 |\n/setentryfield file={{getvar::lorebookName}} uid={{var::charNameUID}} field=role 1 |\n/setentryfield file={{getvar::lorebookName}} uid={{var::charNameUID}} field=depth 2 |\n\n/echo Lorebook entry for {{getvar::charName}} created successfully! |\n\n/flushvar charName |\n/flushvar completeChar |\n/flushvar charProfile |\n",
            "preventAutoExecute": true,
            "showLabel": false,
            "title": ""
        },
        {
            "automationId": "",
            "contextList": [],
            "executeOnAi": false,
            "executeOnChatChange": false,
            "executeOnGroupMemberDraft": false,
            "executeOnStartup": false,
            "executeOnUser": false,
            "id": 17,
            "isHidden": true,
            "label": "Add-Update Other",
            "message": "/parser-flag STRICT_ESCAPING on ||\n\n/if left={{getvar::lorebookName}} right=\"\" rule=eq {: \n\t/wi-list-books |\n\t/buttons labels={{pipe}} Select the lorebook you'd like to use to create the entry. If the one you'd like isn't shown, cancel and make sure it's active. |\n\t/if left={{pipe}} right=\"\" rule=eq \n\t\telse=\"/setvar key=lorebookName {{pipe}}\" \n\t\t\"/abort\" \n:} |\n\n/input Enter a name for the entry | \n/if left={{pipe}} right=\"\" rule=eq \nelse=\"/setvar key=entryName {{pipe}}\"\n\t \"/abort\" |\n\n/input Enter the category for the entry | \n/if left={{pipe}} right=\"\" rule=eq \n\telse=\"/setvar key=inputCategory {{pipe}}\" \n\t\"/abort\" |\n\n/input Enter the details of the entry | \n/if left={{pipe}} right=\"\" rule=eq \n\telse=\"/setvar key=inputAbout {{pipe}}\" \n\t\"/abort\" |\n\n/setvar key=\"demarc\" {{newline}}{{newline}}---{{newline}}{{newline}} |\n\n/api {{getvar::charAPI}} |\n/model {{getvar::charModel}} |\n/preset {{getvar::charPreset}} |\n/context {{getvar::charCTXTemplate}} |\n/instruct {{getvar::charInsTemplate}} |\n/tokenizer {{getvar::charTokenizer}} | \n\n/findentry file={{getvar::lorebookName}} field=key \"{{getvar::entryName}}\" |\n/let \"dbUid\" {{pipe}} ||\n\t/if left={{var::dbUid}} right=\"\" rule=neq else={: \n\t\t/gen lock=on {{instructInput}} \n\t\t<Instruction>\n\t\tNow, pause the chat and create a new database entry to be added into your knowledge pool. It will act as a reminder for you in the future. Don't talk, don't RP. Just output the new entry to be added into your database. ``{{getvar::entryName}}`` is the name,``{{getvar::inputCategory}}`` is the category, and ``{{getvar::inputAbout}}`` are the entry details. Write the entry using clear and direct language, expanding on the details you were given.\n\t\t</Instruction>\n\t\t```\n\t\t<template>\n\t\t# {{getvar::inputCategory}} - {{getvar::entryName}}{{getvar::demarc}}[entry details without brackets]\n\t\t</template>\n\t\t```\n\t\t{{instructFirstOutput}} | \n\t\t/setvar key=dbContent [{{pipe}}] | \n\t\t\n\t\t/re-replace var=dbContent find=\"/\\<(.*)\\>/gm\" replace={{noop}} {{getvar::dbContent}} |\n\t/setvar key=dbContent {{pipe}} ||\n\t/re-replace var=dbContent find=\"/\\`/gm\" replace={{noop}} {{getvar::dbContent}} |\n\t/setvar key=dbContent {{pipe}} ||\n\t\n\t\t/createentry file={{getvar::lorebookName}} key=\"{{getvar::entryName}}\" |\n\t\t/findentry file={{getvar::lorebookName}} field=key \"{{getvar::entryName}}\" |\n\t/let \"dbUid2\" {{pipe}} |\n\t/setentryfield file={{getvar::lorebookName}} uid={{var::dbUid2}} field=comment {{getvar::inputCategory}} - {{getvar::entryName}} |\n\t/setentryfield file={{getvar::lorebookName}} uid={{var::dbUid2}} field=content {{getvar::dbContent}} |\n\t/setentryfield file={{getvar::lorebookName}} uid={{var::dbUid2}} field=constant true |\n\t/setentryfield file={{getvar::lorebookName}} uid={{var::dbUid2}} field=position 4 |\n\t/setentryfield file={{getvar::lorebookName}} uid={{var::dbUid2}} field=role 1 |\n\t/setentryfield file={{getvar::lorebookName}} uid={{var::dbUid2}} field=depth 2 |\n\t/echo {{getvar::inputCategory}} - {{getvar::entryName}} created successfully. |\n\n\t/flushvar inputCategory |\n\t/flushvar entryName |\n\t/flushvar dbContent |\n\t/flushvar dbRawContent |\n\t/flushvar inputAbout |\n\n\t/abort |\n\t:} \n\t{: \n\t/echo Updating the entry for {{getvar::inputCategory}} - {{getvar::entryName}}... | \n\t/findentry file={{getvar::lorebookName}} field=key \"{{getvar::entryName}}\" |\n\t/let \"dbUid4\" {{pipe}} |\n\t/getentryfield file={{getvar::lorebookName}} uid={{var::dbUid4}} field=content |\n\t/let \"oldContent\" {{pipe}} |\n\t/gen lock=on {{instructInput}} \n\t\n\tNow, pause the chat and update the database entry to be added into your knowledge pool. It will act as a reminder for you in the future. Don't talk, don't RP. Just update the entry to be added into your database. The previous entry was: {{getvar::demarc}}```{{var::oldContent}}```{{getvar::demarc}} ``{{getvar::entryName}}`` is the name,``{{getvar::inputCategory}}`` is the category, and ``{{getvar::inputAbout}}`` are the new entry details. Ponder what information must remain the same, and how the new information can be seamlessly woven in. Consider using multiple paragraphs to best organise the information on a while. Once you have the perfect writing for the entry, update the entry using clear and direct language, retaining as much as the old info as needed while expanding on the entry with the new details you were given. ONLY OUTPUT THE RAW INFO AS SEEN IN THE TEMPLATE, AS SPECIAL FORMATTING IS USED LATER.\n\t ```\n\t<template>\n\t # {{getvar::inputCategory}} - {{getvar::entryName}}{{getvar::demarc}}[entry details without brackets]\n\t</template>\n\t```\n\t {{instructFirstOutput}} |\n\t\t/setvar key=dbContent [{{pipe}}] | \n\t\t\n\t/re-replace var=dbContent find=\"/\\<(.*)\\>/gm\" replace={{noop}} {{getvar::dbContent}} |\n\t/setvar key=dbContent {{pipe}} ||\n\t/re-replace var=dbContent find=\"/\\`/gm\" replace={{noop}} {{getvar::dbContent}} |\n\t/setvar key=dbContent {{pipe}} ||\n\t\n\t/findentry file={{getvar::lorebookName}} field=key \"{{getvar::entryName}}\" |\n\t/let \"dbUid3\" {{pipe}} |\n\t/setentryfield file={{getvar::lorebookName}} uid={{var::dbUid3}} field=content {{getvar::dbContent}} |\n\t/echo {{getvar::inputCategory}} - {{getvar::entryName}} updated! |\n\n\t/flushvar inputCategory |\n\t/flushvar entryName |\n\t/flushvar dbContent |\n\t/flushvar dbRawContent |\n\t/flushvar inputAbout |\n:} |\n\n/flushvar demarc |",
            "preventAutoExecute": true,
            "showLabel": false,
            "title": ""
        },
        {
            "automationId": "",
            "contextList": [],
            "executeOnAi": false,
            "executeOnChatChange": false,
            "executeOnGroupMemberDraft": false,
            "executeOnStartup": false,
            "executeOnUser": false,
            "id": 13,
            "isHidden": false,
            "label": " ꙩ Look ⋮",
            "message": "/parser-flag STRICT_ESCAPING on ||\n\n/input What would you like look at? |\n/if left={{pipe}} right=\"\" rule=eq \n\telse=\"/setvar key=userLook {{pipe}}\" \n\t\"/abort\" |\n\n/inject id=trackerInject position=chat depth=1 scan=true role=User {{getvar::UpdateTracker}} |\n\n/gen lock=on name={{char}} {{instructInput}} \n<Instruction>\nStop the adventure, do not continue the adventure or RP. You have been tasked to describe something {{user}} is looking at, specifically: ``{{getvar::userLook}}``. If {{user}} is looking at another char, describe the char in intricate detail, including what they're wearing, piece by piece, and how they smell. If {{user}} is looking at a specific part of a char's body or object, describe that part in intricate detail instead. If it's an object {{user}} is looking at, give a brief description of the object (no more than a few sentences of a paragraph). {{user}} may also look at the surroundings, which should be described in as much detail as you'd describe a char. Time is frozen, so your description should be as if you're describing a photograph with some extra sensory perception, such as sound and smell. Limit your response to 80 words and make sure to use the second-person perspective in the present tense. Also make sure that your description fits the most current, up to date state of whatever is being looked at. Start your response off with, 'As you look at <whatever the user request to look at>, you see...' ONLY NARRATE THE DESCRIPTION OF WHAT IS BEING LOOKED AT, NOTHING ELSE. DO NOT MOVE THE STORY FORWARD. \n</Instruction>\n{{instructFirstOutput}} |\n/comment {{pipe}} |\n\n/flushvar userLook |",
            "preventAutoExecute": true,
            "showLabel": false,
            "title": "Look at something, or your surroundings"
        },
        {
            "automationId": "",
            "contextList": [],
            "executeOnAi": false,
            "executeOnChatChange": false,
            "executeOnGroupMemberDraft": false,
            "executeOnStartup": false,
            "executeOnUser": false,
            "id": 50,
            "isHidden": false,
            "label": "Undo ↶",
            "message": "/len {{getvar::savedTracker}} |\n\t/setvar key=indexNum {{pipe}} ||\n\t\t/if left={{getvar::indexNum}} right=0 rule=eq \n\t\t\telse={: /pass  | :}\n\t\t\t{: /echo No more tracker saves to undo! | /flushvar indexNum | /abort | :} |\n\n/addvar key=indexNum -1 ||\n\t/splice var=savedTracker start={{getvar::indexNum}} delete=1 |\n\t/setvar key=savedTracker {{pipe}} ||\n\n/len {{getvar::savedTracker}} |\n\t/setvar key=indexNum {{pipe}} ||\n\t/addvar key=indexNum -1 ||\n\n/find var=savedTracker {: /test left={{index}} right={{getvar::indexNum}} rule=eq :} |\n\t/setvar key=UpdateTracker {{pipe}} |\n\n/delmode 2 ||\n/flushvar indexNum |\n/flushvar tempTracker |",
            "preventAutoExecute": true,
            "showLabel": false,
            "title": "Undo the last action and reverts the tracker state. Max of 5 undos"
        },
        {
            "automationId": "",
            "contextList": [],
            "executeOnAi": false,
            "executeOnChatChange": false,
            "executeOnGroupMemberDraft": false,
            "executeOnStartup": false,
            "executeOnUser": false,
            "id": 25,
            "isHidden": false,
            "label": " Regen ⟳",
            "message": "/parser-flag STRICT_ESCAPING on ||\n\n/if left={{getvar::messageMode}} right=Plus rule=eq else={:\n\t/:AdventureTools.Regenerate-Classic\n:} \n\"/:AdventureTools.Regenerate-Plus\" |",
            "preventAutoExecute": false,
            "showLabel": false,
            "title": "Regenerate the AI's message. Any other questions?"
        },
        {
            "automationId": "",
            "contextList": [],
            "executeOnAi": false,
            "executeOnChatChange": false,
            "executeOnGroupMemberDraft": false,
            "executeOnStartup": false,
            "executeOnUser": false,
            "id": 9,
            "isHidden": false,
            "label": " OOC ⇨",
            "message": "/setvar key=userQuery {{input}} |\n/if left={{getvar::userQuery}} right=\"\" rule=eq\n    else={: \n    /send (OOC: {{getvar::userQuery}}) ||\n    /setinput {{noop}} |\n    /pass | :}\n{: /buttons labels=[\"I understand\"] The message was blank! Type something first! | \n    /abort \n:} |\n\n/parser-flag STRICT_ESCAPING on ||\n\n/if left={{getvar::trackerTemplate}} right=\"\" rule=eq \"/:AdventureTools.defaultPrompts\" |\n\n/if left={{getvar::UpdateTracker}} right=\"\" rule=eq {: \n\t/setvar key=UpdateTracker {{getvar::trackerTemplate}} |\n:} |\n\n/inject id=trackerInject position=chat depth=2 scan=true role=User {{getvar::UpdateTracker}} |\n\n/gen lock=on name={{char}} (OOC: Pause the adventure/chat and do not continue it, only answer the OOC message: ``{{lastUserMessage}}``. Use this template for replying: (OOC: [your message here without brackets])) |\n/sendas name={{char}} {{pipe}} |\n\n/flushvar userQuery |",
            "preventAutoExecute": true,
            "showLabel": false,
            "title": "Say something OOC (Out of Character)"
        },
        {
            "automationId": "",
            "contextList": [],
            "executeOnAi": false,
            "executeOnChatChange": false,
            "executeOnGroupMemberDraft": false,
            "executeOnStartup": false,
            "executeOnUser": false,
            "id": 23,
            "isHidden": true,
            "label": " Send ⮕",
            "message": "/parser-flag STRICT_ESCAPING on ||\n\n/setvar key=\"messageMode\" Cassic |\n\n/setvar key=userMessage {{input}} |\n/if left={{getvar::userMessage}} right=\"\" rule=eq\n\telse={: \n\t/send {{getvar::userMessage}} |\n\t/setinput {{noop}} |\n\t/pass | :}\n{: /buttons labels=[\"I understand\"] The message was blank! Type something first! | \n\t/abort \n:} |\n\n/let \"demarc\" {{newline}}{{newline}}---{{newline}}{{newline}} |\n\n/if left={{getvar::responsePrompt}} right=\"\" rule=eq \"/:AdventureTools.defaultPrompts\" |\n/if left={{getvar::trackerPrompt}} right=\"\" rule=eq \"/:AdventureTools.defaultPrompts\" |\n/if left={{getvar::trackerTemplate}} right=\"\" rule=eq \"/:AdventureTools.defaultPrompts\" |\n\n/if left={{getvar::UpdateTracker}} right=\"\" rule=eq {: \n\t/setvar key=UpdateTracker {{getvar::trackerTemplate}} |\n:} |\n\n/inject id=trackerInject position=chat depth=2 scan=true role=User {{getvar::UpdateTracker}} |\n\n/if left={{getvar::advAPI}} right=\"\" rule=eq else={: \n\t/api {{getvar::advAPI}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::advModel}} right=\"\" rule=eq else={: \n\t/model {{getvar::advModel}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::adventurePreset}} right=\"\" rule=eq else={: \n\t/preset {{getvar::adventurePreset}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::advCTXTemplate}} right=\"\" rule=eq else={: \n\t/context {{getvar::advCTXTemplate}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::adventureInstructPreset}} right=\"\" rule=eq else={: \n\t/instruct {{getvar::adventureInstructPreset}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::advTokenizer}} right=\"\" rule=eq else={: \n\t/tokenizer {{getvar::advTokenizer}} |\n\t:}\n\t{: /pass |\n:} |\n\n/gen lock=on name={{char}} {{instructInput}} \n<Instruction>\n{{getvar::responsePrompt}}\n</Instruction>\n{{instructFirstOutput}} |\n/setvar key=botResponse {{pipe}} ||\n\n/:AdventureTools.regex-Pile |\n\n\n/if left={{getvar::cotAPI}} right=\"\" rule=eq else={: \n\t/api {{getvar::cotAPI}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::cotModel}} right=\"\" rule=eq else={: \n\t/model {{getvar::cotModel}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::cotPreset}} right=\"\" rule=eq else={: \n\t/preset {{getvar::cotPreset}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::cotCTXTemplate}} right=\"\" rule=eq else={: \n\t/context {{getvar::cotCTXTemplate}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::cotInstructPreset}} right=\"\" rule=eq else={: \n\t/instruct {{getvar::cotInstructPreset}} |\n\t:}\n\t{: /pass |\n:} |\n\n\n/if left={{getvar::cotTokenizer}} right=\"\" rule=eq else={: \n\t/tokenizer {{getvar::cotTokenizer}} |\n\t:}\n\t{: /pass |\n:} |\n\n\n/echo Updating Tracker, please wait. |\n/gen lock=on length=1500 {{instructFirstOutput}} \n<Instruction>\n{{getvar::trackerPrompt}}\n</Instruction>\n```\n<template>\n{{getvar::trackerTemplate}}\n</template>\n```\n{{instructFirstOutput}} |\n/setvar key=UpdateTracker {{pipe}} |\n/echo Tracker updated! |\n\n/:AdventureTools.regex-Pile |\n\n/if left={{getvar::footerMode}} right=\"Disable Footer\" rule=eq else={:\n\t/sendas name={{char}} {{getvar::botResponse}}{{var::demarc}}**Time:** {{getvar::currentTime}}{{newline}}**Current Location:** {{getvar::currentLocation}}{{newline}}**Nearby Characters:** {{getvar::currentNearby}} |\n\t:}\n\t{: /sendas name={{char}} {{getvar::botResponse}} |\n:} |\n\n/if left={{getvar::savedTracker}} right=\"\" rule=eq \"/addvar key=savedTracker []\" |\n/addvar key=savedTracker {{getvar::UpdateTracker}} ||\n\n/len {{getvar::savedTracker}} |\n/if left={{pipe}} right=5 rule=gt {: /setvar key=tempTrackerList [] | \n\t/filter var=savedTracker {: /test left={{index}} rule=gte right=1 :} |\n\t/foreach list={{pipe}} {: /addvar key=tempTrackerList {{item}} :} |\n\t/setvar key=savedTracker {{getvar::tempTrackerList}} |\n:} |\n\n/if left={{getvar::advAPI}} right=\"\" rule=eq else={: \n\t/api {{getvar::advAPI}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::advModel}} right=\"\" rule=eq else={: \n\t/model {{getvar::advModel}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::adventurePreset}} right=\"\" rule=eq else={: \n\t/preset {{getvar::adventurePreset}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::advCTXTemplate}} right=\"\" rule=eq else={: \n\t/context {{getvar::advCTXTemplate}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::adventureInstructPreset}} right=\"\" rule=eq else={: \n\t/instruct {{getvar::adventureInstructPreset}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::advTokenizer}} right=\"\" rule=eq else={: \n\t/tokenizer {{getvar::advTokenizer}} |\n\t:}\n\t{: /pass |\n:} |\n\n/setvar key=lastBotMessageID {{lastMessageId}} ||\n/flushvar userMessage |\n/flushvar botResponse |\n/flushvar currentObjects |\n/flushvar currentTime |\n/flushvar tempTrackerList |",
            "preventAutoExecute": true,
            "showLabel": false,
            "title": "What do you think this does?"
        },
        {
            "automationId": "",
            "contextList": [],
            "executeOnAi": false,
            "executeOnChatChange": false,
            "executeOnGroupMemberDraft": false,
            "executeOnStartup": false,
            "executeOnUser": false,
            "id": 31,
            "isHidden": false,
            "label": " Send+ ⮕",
            "message": "/parser-flag STRICT_ESCAPING on |\n\n/setvar key=userMessage {{input}} |\n/if left={{getvar::userMessage}} right=\"\" rule=eq\n\telse={: \n\t/send {{getvar::userMessage}} |\n\t/setinput {{noop}} |\n\t/pass | :}\n{: /buttons labels=[\"I understand\"] The message was blank! Type something first! | \n\t/abort \n:} |\n\n/let \"demarc\" {{newline}}{{newline}}---{{newline}}{{newline}} |\n\n/setvar key=\"messageMode\" Plus |\n\n/if left={{getvar::cotPrompt}} right=\"\" rule=eq  \"/:AdventureTools.defaultPrompts\" |\n/if left={{getvar::cotTemplate}} right=\"\" rule=eq \"/:AdventureTools.defaultPrompts\" |\n/if left={{getvar::cotResponsePrompt}} right=\"\" rule=eq \"/:AdventureTools.defaultPrompts\" |\n/if left={{getvar::trackerPrompt}} right=\"\" rule=eq \"/:AdventureTools.defaultPrompts\" |\n/if left={{getvar::trackerTemplate}} right=\"\" rule=eq \"/:AdventureTools.defaultPrompts\" |\n\n/if left={{getvar::UpdateTracker}} right=\"\" rule=eq {: \n\t/setvar key=UpdateTracker {{getvar::trackerTemplate}} |\n:} |\n\n/inject id=trackerInject position=chat depth=2 scan=true role=User {{getvar::UpdateTracker}} |\n\n/if left={{getvar::cotAPI}} right=\"\" rule=eq else={: \n\t/api {{getvar::cotAPI}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::cotModel}} right=\"\" rule=eq else={: \n\t/model {{getvar::cotModel}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::cotPreset}} right=\"\" rule=eq else={: \n\t/preset {{getvar::cotPreset}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::cotCTXTemplate}} right=\"\" rule=eq else={: \n\t/context {{getvar::cotCTXTemplate}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::cotInstructPreset}} right=\"\" rule=eq else={: \n\t/instruct {{getvar::cotInstructPreset}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::cotTokenizer}} right=\"\" rule=eq else={: \n\t/tokenizer {{getvar::cotTokenizer}} |\n\t:}\n\t{: /pass |\n:} |\n\n/gen lock=on length=1500 {{instructFirstOutput}} \n<Instruction>\n{{getvar::cotPrompt}}\n</Instruction>\nOnce you have all the answers, output your analysis, strictly following the template. Fill in placeholders. All fields required:\n```\n<template>\n{{getvar::cotTemplate}}\n</template>\n```\n{{instructFirstOutput}} |\n/setvar key=\"botLogic\" {{pipe}} |\n\n/:AdventureTools.regex-Pile |\n\n/sendas name={{char}} {{getvar::botLogic}} ||\n/setvar key=lastBotMessageID {{lastMessageId}} ||\n\n/hide {{getvar::lastBotMessageID}} |\n\n/if left={{getvar::advAPI}} right=\"\" rule=eq else={: \n\t/api {{getvar::advAPI}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::advModel}} right=\"\" rule=eq else={: \n\t/model {{getvar::advModel}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::adventurePreset}} right=\"\" rule=eq else={: \n\t/preset {{getvar::adventurePreset}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::advCTXTemplate}} right=\"\" rule=eq else={: \n\t/context {{getvar::advCTXTemplate}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::adventureInstructPreset}} right=\"\" rule=eq else={: \n\t/instruct {{getvar::adventureInstructPreset}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::advTokenizer}} right=\"\" rule=eq else={: \n\t/tokenizer {{getvar::advTokenizer}} |\n\t:}\n\t{: /pass |\n:} |\n\n/gen lock=on as=char name={{char}} {{instructFirstOutput}} \n<Instruction>\n{{getvar::cotResponsePrompt}}\n</Instruction>\n{{instructFirstOutput}} |\n/setvar key=botResponse {{pipe}} ||\n\n/:AdventureTools.regex-Pile |\n\n/if left={{getvar::cotAPI}} right=\"\" rule=eq else={: \n\t/api {{getvar::cotAPI}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::cotModel}} right=\"\" rule=eq else={: \n\t/model {{getvar::cotModel}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::cotPreset}} right=\"\" rule=eq else={: \n\t/preset {{getvar::cotPreset}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::cotCTXTemplate}} right=\"\" rule=eq else={: \n\t/context {{getvar::cotCTXTemplate}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::cotInstructPreset}} right=\"\" rule=eq else={: \n\t/instruct {{getvar::cotInstructPreset}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::cotTokenizer}} right=\"\" rule=eq else={: \n\t/tokenizer {{getvar::cotTokenizer}} |\n\t:}\n\t{: /pass |\n:} |\n\n\n/echo Updating Tracker, please wait. |\n/gen lock=on length=1500 {{instructFirstOutput}} \n<Instruction>\n{{getvar::trackerPrompt}}\n</Instruction>\n```\n<template>\n{{getvar::trackerTemplate}}\n</template>\n```\n{{instructFirstOutput}} |\n/setvar key=UpdateTracker {{pipe}} |\n/echo Tracker updated! |\n\n/:AdventureTools.regex-Pile |\n\n/if left={{getvar::footerMode}} right=\"Disable Footer\" rule=eq else={:\n\t/swipes-add name={{char}} {{getvar::botResponse}}{{var::demarc}}**Time:** {{getvar::currentTime}}{{newline}}**Current Location:** {{getvar::currentLocation}}{{newline}}**Nearby Characters:** {{getvar::currentNearby}} |\n\t:}\n\t{: /swipes-add name={{char}} {{getvar::botResponse}} |\n:} |\n\n/if left={{getvar::savedTracker}} right=\"\" rule=eq \"/addvar key=savedTracker []\" |\n/addvar key=savedTracker {{getvar::UpdateTracker}} ||\n\n/len {{getvar::savedTracker}} |\n/if left={{pipe}} right=5 rule=gt {: /setvar key=tempTrackerList [] | \n\t/filter var=savedTracker {: /test left={{index}} rule=gte right=1 :} |\n\t/foreach list={{pipe}} {: /addvar key=tempTrackerList {{item}} :} |\n\t/setvar key=savedTracker {{getvar::tempTrackerList}} |\n:} |\n\n/if left={{getvar::advAPI}} right=\"\" rule=eq else={: \n\t/api {{getvar::advAPI}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::advModel}} right=\"\" rule=eq else={: \n\t/model {{getvar::advModel}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::adventurePreset}} right=\"\" rule=eq else={: \n\t/preset {{getvar::adventurePreset}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::advCTXTemplate}} right=\"\" rule=eq else={: \n\t/context {{getvar::advCTXTemplate}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::adventureInstructPreset}} right=\"\" rule=eq else={: \n\t/instruct {{getvar::adventureInstructPreset}} |\n\t:}\n\t{: /pass |\n:} |\n\n/if left={{getvar::advTokenizer}} right=\"\" rule=eq else={: \n\t/tokenizer {{getvar::advTokenizer}} |\n\t:}\n\t{: /pass |\n:} |\n\n/preset {{getvar::adventurePreset}} |\n/unhide {{getvar::lastBotMessageID}} |\n\n/flushvar userMessage |\n/flushvar botResponse |\n/flushvar botLogic |\n/flushvar currentObjects |\n/flushvar currentTime |\n/flushvar tempTrackerList |\n",
            "preventAutoExecute": true,
            "showLabel": false,
            "title": "Sends your message and uses CoT (Chain of Thought) prompting"
        },
        {
            "automationId": "",
            "contextList": [],
            "executeOnAi": false,
            "executeOnChatChange": false,
            "executeOnGroupMemberDraft": false,
            "executeOnStartup": false,
            "executeOnUser": false,
            "id": 37,
            "isHidden": true,
            "label": "defaultPrompts",
            "message": "/parser-flag STRICT_ESCAPING on ||\n\n/let \"demarc\" {{newline}}{{newline}}---{{newline}}{{newline}} |\n\n/if left={{getvar::cotPrompt}} right=\"\" rule=eq {: \n/setvar key=cotPrompt Pause the adventure, and do not continue it or the RP. This is a space for you to gather and write your analysis on what is realistically expected of the situation. Take a deep breath and ponder the following step by step: Who is all near \\{\\{user\\}\\}? If you're creating a new scene or introducing a new character, what characters would logically be present? What is realistic for them? What kind of traits, preferences, or abilities could come into play here? What is physically feasible and actually possible? Ponder and apply ALL rules, obstacles, and physical limitations; list clothing for every person in the scene, even if they are unnamed. Follow these rules for determining daylight changes: 07:30 - Sunrise; 19:00 - Sunset Begins; 21:00 - Sunset Ends, Night Begins. A new day begins at 00:00:00. Remember: always create/reference weather/daylight changes even if the scene is indoors. Most buildings have windows where weather and daylight changes can be observed. Always avoid speculating {{user}}'s thoughts, emotions, motivations, or intentions; those are for {{user}} to decide. Remember, this is a spot for careful thought and consideration to what is logically possible and characters' personalities. Refer to {{user}} as you, your, and you're.  |\n:} |\n\n/if left={{getvar::cotTemplate}} right=\"\" rule=eq {: \n/setvar key=cotTemplate # Situation\n\n**The current daylight phase is:** XYZ (dusk, dawn, morning, noon, afternoon etc.)\n**The current season is:** XYZ (Spring, Summer, Autumn, or Winter)\n**The current location is:** XYZ\n**The weather is:** XYZ\n\n**Summary of Adventure So Far:** XYZ123\n# Characters\n\n**Characters Around You:** X, Y, Z\n\n**Character:** You\n**Wearing:** X, Y, Z <keep track if any clothing/equipment has been newly worn/removed>\n**Items Acquired, Dropped, or Consumed:** X, Y, Z\n**Current Inventory:** X,Y, Z\n**Relevant Personality Traits & Preferences:** X, Y, Z\n**Stats, Physical, & Psychological Limits:** X, Y, Z\n\n**Character:** X\n**Wearing:** X, Y, Z <keep track if any clothing/equipment has been newly worn/removed>\n**Items Acquired, Dropped, or Consumed:** X, Y, Z\n**Current Inventory:** X,Y, Z\n**Relevant Personality Traits & Preferences:** X, Y, Z\n**Stats, Physical, & Psychological Limits:** X, Y, Z\n\n# Logical Barriers & Freedoms\n\n**Physical Barriers:** XYZ\n**Applicable Rules to the Current Situation:** XYZ\n**Nearby Items or Interactive Objects:** XYZ\n\n# Summary\n\n**You have written your action as:** \\{\\{lastUserMessage\\}\\} \n\n**List of plausible reactions of other characters based on the logistics of all of the above factors:** \n\n* X\n* Y\n* Z\n\n**List of plausible reactions of environmental changes based on the logistics of all of the above factors:** \n\n* X\n* Y\n* Z\n\n**Most likely reaction/outcome of other characters/environment to your actions, with all logical and emotional factors above considered:** XYZ\n**Logical & realistic critique of chosen reactions/outcome:** XYZ\n**Proposed changes to chosen reactions/outcome:** XYZ\n\n**Analysis Summary:** |\n:} |\n\n/if left={{getvar::cotResponsePrompt}} right=\"\" rule=eq {: \n/setvar key=cotResponsePrompt Consider the chat history, the current logistics written here: {{var::demarc}}```\\{\\{getvar::botLogic\\}\\}```{{var::demarc}} and the scenario rules. Be sure to elaborate on the chosen outcome in detail to flesh out the adventure. When narrating {{user}}'s actions, ALWAYS make sure to ONLY narrate what he/she has input according to his/her message: \"\\{\\{lastUserMessage\\}\\}\" and NOTHING ELSE. The adventure should progress based on {{user}}'s actions to keep player agency. And since this is an adventure centred around {{user}}, address him/her in the second-person perspective (you/your/you're) with the present-tense in your response. Write out your response to {{user}}'s actions: \"\\{\\{lastUserMessage\\}\\}\", focusing on describing how OTHERS respond to {{user}}, either with dialogue, actions, or both, keeping within any and all physical limitations, and how {{user}}'s actions affect the outcome of the situation. Make sure to ONLY output the narration RAW, other formatting will be added later. \n\nOnce you're done describing everything outside of \\{\\{user\\}\\}'s actions, ask what \\{\\{user\\}\\} would like to do, or how \\{\\{user\\}\\} reacts, or \\{\\{user\\}\\}'s response, etc. on a new line. |\n:} |\n\n/if left={{getvar::responsePrompt}} right=\"\" rule=eq {: \n/setvar key=responsePrompt *Consider the chat history, the current logistics, and the scenario rules. When narrating {{user}}'s actions, ALWAYS make sure to ONLY narrate what he/she has input according to his/her message: ``\\{\\{lastuserMessage\\}\\}`` and NOTHING ELSE. The adventure should progress based on {{user}}'s actions to keep player agency. And since this is an adventure centred around \\{\\{user\\}\\}, address him/her in the second-person perspective (you/your/you're) in your response. Write out your response to {{user}}'s actions: ``\\{\\{lastuserMessage\\}\\}``, focusing on describing how OTHERS respond to \\{\\{user\\}\\}, either with dialogue, actions, or both, keeping within any and all physical limitations, and how \\{\\{user\\}\\}'s actions affect the outcome of the situation. Make sure to ONLY output the narration RAW, other formatting will be added later. Once you're done describing everything outside of {{user}}'s actions, ask what \\{\\{user\\}\\} would like to do, or how \\{\\{user\\}\\} reacts, or \\{\\{user\\}\\}'s response, etc. on a new line*  |\n:} |\n\n/if left={{getvar::trackerPrompt}} right=\"\" rule=eq {: \n/setvar key=trackerPrompt Now, pause the adventure. Don't speak. Don't RP. You will be gathering and creating information for each character currently in the scene, besides \\{\\{char\\}\\}. Take note of the current situation, the chat history, and carefully scan \\{\\{char\\}\\}'s latest response: {{var::demarc}}``\\{\\{getvar::botResponse\\}\\}``{{var::demarc}}. Ponder and consider ALL of the following: How much time has realistically passed? What's the weather? The location? What living people or creatures are near {{user}}? What items or interactive objects are nearby \\{\\{user\\}\\}? Who is all present and what are they wearing? Make up clothing if it wasn't mentioned before, and make an entry for every character present, even if they aren't named yet. When a character is no longer in the scene, delete the entry completely, leaving it blank. Once you've formulated a perfect answer, logically update the adventure info with the provided template. Only output the information with the template as if you're a computer, NOTHING ELSE. |\n:} |\n\n/if left={{getvar::trackerRefreshPrompt}} right=\"\" rule=eq {: \n/setvar key=trackerRefreshPrompt Now, pause the adventure. Don't speak. Don't RP. You will be gathering and creating information for each character currently in the scene, besides \\{\\{char\\}\\}. Take note of the current situation, the chat history, and carefully scan \\{\\{char\\}\\}'s latest response: {{var::demarc}}``\\{\\{lastCharMessage\\}\\}``{{var::demarc}}. Ponder and consider ALL of the following: What time is it? What's the weather? The location? What living people or creatures are near \\{\\{user\\}\\}? What items or interactive objects are nearby \\{\\{user\\}\\}? Who is all present and what are they wearing? Make up clothing if it wasn't mentioned before, and make an entry for every character present, even if they aren't named yet. When a character is no longer in the scene, delete the entry completely, leaving it blank. Once you've formulated a perfect answer, logically update the adventure info with the provided template. Only output the information with the template as if you're a computer, NOTHING ELSE. |\n:} |\n\n/if left={{getvar::trackerTemplate}} right=\"\" rule=eq {: \n/setvar key=trackerTemplate [# World Tracker\n\n**Current Time/Date:** HH:MM:SS; <MM/DD/YYYY> (<insert name of day>)\n**Current Location:** XYZ\n**Current Weather:** XYZ\n**Nearby Characters:** XYZ <EXCLUDING \\{\\{user\\}\\}, create a comma-separated list of characters and creatures>\n**Nearby Objects:**XYZ <create a comma-separated list of important items and interactive objects>]{{var::demarc}}# You\n\n**Wearing:** \n\n- XYZ\n- XYZ\n\n**Inventory:** X, Y, Z\n\n**Current Position:** XYZ {{var::demarc}}# <insert Second Character Name>\n\n**Wearing:** \n\n- XYZ\n- XYZ\n\n**Inventory:** X, Y, Z\n\n**Current Position:** XYZ |\n:} |",
            "preventAutoExecute": true,
            "showLabel": false,
            "title": ""
        },
        {
            "automationId": "",
            "contextList": [],
            "executeOnAi": false,
            "executeOnChatChange": false,
            "executeOnGroupMemberDraft": false,
            "executeOnStartup": false,
            "executeOnUser": false,
            "id": 43,
            "isHidden": true,
            "label": "saveSettings",
            "message": "/parser-flag STRICT_ESCAPING on ||\n\n/if left={{getglobalvar::settingsList}} right=\"\" rule=eq \"/addglobalvar key=settingsList []\" |\n\n/input What would you like to name your settings? |\n/setvar key=settingsName {{pipe}} |\n\n/if left={{getglobalvar::settingsList}} right=\"{{getvar::settingsName}}\" rule=in \n\t{: /buttons labels=[\"I understand\"] {{getvar::settingsName}} already exists. Please choose a different name | \n\t/abort |\n:} |\n\n\t/if left={{getvar::settingsName}} rule=eq right=\"\" \n\t\telse={: /addglobalvar key=\"settingsList\" {{getvar::settingsName}} |\n\t\t/setglobalvar key={{getvar::settingsName}} {\"lorebookName\" : \"{{getvar::lorebookName}}\", \"toolsVersion\" : \"{{getvar::toolsVersion}}\", \"messageMode\" : \"{{getvar::messageMode}}\", \"adventurePreset\" : \"{{getvar::adventurePreset}}\", \"charPreset\" : \"{{getvar::charPreset}}\", \"footerMode\" : \"{{getvar::footerMode}}\", \"advCTXTemplate\" : \"{{getvar::advCTXTemplate}}\", \"adventureInstructPreset\" : \"{{getvar::adventureInstructPreset}}\", \"advModel\" : \"{{getvar::advModel}}\", \"advAPI\" : \"{{getvar::advAPI}}\", \"advTokenizer\" : \"{{getvar::advTokenizer}}\", \"cotPreset\" : \"{{getvar::cotPreset}}\", \"cotCTXTemplate\" : \"{{getvar::cotCTXTemplate}}\", \"cotInstructPreset\" : \"{{getvar::cotInstructPreset}}\", \"cotModel\" : \"{{getvar::cotModel}}\", \"cotAPI\" : \"{{getvar::cotAPI}}\", \"cotTokenizer\" : \"{{getvar::cotTokenizer}}\", \"charCTXTemplate\" : \"{{getvar::charCTXTemplate}}\", \"charInsTemplate\" : \"{{getvar::charInsTemplate}}\", \"charModel\" : \"{{getvar::charModel}}\", \"charAPI\" : \"{{getvar::charAPI}}\", \"charTokenizer\" : \"{{getvar::charTokenizer}}\" } |\n\t\t/echo Settings saved! Everyone else take damage. | :}\n\t\t\"/abort\" |\n:} |\n\n/flushvar settingsName |",
            "preventAutoExecute": true,
            "showLabel": false,
            "title": ""
        },
        {
            "automationId": "",
            "contextList": [],
            "executeOnAi": false,
            "executeOnChatChange": false,
            "executeOnGroupMemberDraft": false,
            "executeOnStartup": false,
            "executeOnUser": false,
            "id": 41,
            "isHidden": true,
            "label": "loadSettings",
            "message": "/buttons labels={{getglobalvar::settingsList}} Which settings file would you like to load? |\n/setvar key=\"menuSelect\" {{pipe}} ||\n\n/if left={{getvar::menuSelect}} right=\"\" rule=neq \n\telse={: /flushvar menuSelect | \n\t/abort :}\n\t{: /foreach globalvar={{getvar::menuSelect}} \"/setvar key={{index}} {{item}}\" \n:} |\n\n/setvar key=messageMode {{getvar::messageMode}} |\n\n/if left={{getvar::messageMode}} right=Plus rule=eq else={:\n\t/qr-update set=AdventureTools label=\" Send+ ⮕\" hidden=true |\n\t/qr-update set=AdventureTools label=\" Send ⮕\" hidden=false |\n\t/pass :}\n\t{: /qr-update set=AdventureTools label=\" Send ⮕\" hidden=true |\n\t/qr-update set=AdventureTools label=\" Send+ ⮕\" hidden=false |\n\t/pass\n:} |\n\n/echo Settings loaded! |\n\n/flushvar menuSelect |",
            "preventAutoExecute": true,
            "showLabel": false,
            "title": ""
        },
        {
            "automationId": "",
            "contextList": [],
            "executeOnAi": false,
            "executeOnChatChange": false,
            "executeOnGroupMemberDraft": false,
            "executeOnStartup": false,
            "executeOnUser": false,
            "id": 52,
            "isHidden": true,
            "label": "Samplers-Others",
            "message": "/parser-flag STRICT_ESCAPING on ||\n\n/buttons labels=[\"Adventure Sampler\", \"Adventure Context Template\", \"Adventure Instruct Template\", \"Adventure Model\", \"Adventure API\", \"Adventure Tokenizer\", \"CoT/Tracker Sampler\", \"CoT/Tracker Context Template\", \"CoT/Tracker Instruct Template\", \"CoT/Tracker Model\", \"CoT/Tracker API\", \"CoT/Tracker Tokenizer\", \"Character Sampler\", \"Character Context Template\", \"Character Instruct Template\", \"Character Model\", \"Character API\", \"Character Tokenizer\"] What would you like to set? |\n/setvar key=\"menuSelect\" {{pipe}} ||\n\n/if left={{getvar::menuSelect}} right=\"Adventure Sampler\" rule=eq {:\n\t/input Enter the name of your normal adventure text completion preset (NO SPACES ALLOWED). If you don't have one without spaces, click cancel and create one. | \n\t\t/if left={{pipe}} right=\"\" rule=eq \n\t\t\telse={: /setvar key=adventurePreset {{pipe}} | \n\t\t\t/pass :}\n\t\t\t{: /flushvar menuSelect | /abort :}\n:} |\n\n/if left={{getvar::menuSelect}} right=\"Adventure Context Template\" rule=eq {:\n\t/input Enter the name of your adventure context template (NO SPACES ALLOWED). If you don't have one, click cancel and create one. | \n\t\t/if left={{pipe}} right=\"\" rule=eq \n\t\t\telse={: /setvar key=advCTXTemplate {{pipe}} | \n\t\t\t/pass :}\n\t\t\t{: /flushvar menuSelect | /abort :}\n:} |\n\n/if left={{getvar::menuSelect}} right=\"Adventure Instruct Template\" rule=eq {:\n\t/input Enter the name of your adventure instruct template (NO SPACES ALLOWED). If you don't have one without spaces, click cancel and create one. | \n\t\t/if left={{pipe}} right=\"\" rule=eq \n\t\t\telse={: /setvar key=adventureInstructPreset {{pipe}} | \n\t\t\t/pass :}\n\t\t\t{: /flushvar menuSelect | /abort :}\n:} |\n\n/if left={{getvar::menuSelect}} right=\"Adventure Model\" rule=eq {:\n\t/input Enter the name of your model you'd like to use for adventuring (NO SPACES ALLOWED). | \n\t\t/if left={{pipe}} right=\"\" rule=eq \n\t\t\telse={: /setvar key=advModel {{pipe}} | \n\t\t\t/pass :}\n\t\t\t{: /flushvar menuSelect | /abort :}\n:} |\n\n/if left={{getvar::menuSelect}} right=\"Adventure API\" rule=eq {:\n\t/input Enter the name of your API you'd like to use for adventuring (NO SPACES ALLOWED). | \n\t\t/if left={{pipe}} right=\"\" rule=eq \n\t\t\telse={: /setvar key=advAPI {{pipe}} | \n\t\t\t/pass :}\n\t\t\t{: /flushvar menuSelect | /abort :}\n:} |\n\n/if left={{getvar::menuSelect}} right=\"Adventure Tokenizer\" rule=eq {:\n\t/buttons labels=[\"best_match\", \"gpt2\", \"llama\", \"llama3\", \"gemma\", \"nerd\", \"nerd2\", \"mistral\", \"yi\", \"claude\", \"api_current\", \"none\"] Select your tokenizer for adventuring |\n\t\t/if left={{pipe}} right=\"\" rule=eq \n\t\t\telse={: /setvar key=advTokenizer {{pipe}} | \n\t\t\t/pass :}\n\t\t\t{: /flushvar menuSelect | /abort :}\n:} |\n\n/if left={{getvar::menuSelect}} right=\"CoT/Tracker Sampler\" rule=eq {:\n\t/input Enter the name of your normal CoT/Tracker text completion preset (NO SPACES ALLOWED). If you don't have one without spaces, click cancel and create one. | \n\t\t/if left={{pipe}} right=\"\" rule=eq \n\t\t\telse={: /setvar key=cotPreset {{pipe}} | \n\t\t\t/pass :}\n\t\t\t{: /flushvar menuSelect | /abort :}\n:} |\n\n/if left={{getvar::menuSelect}} right=\"CoT/Tracker Context Template\" rule=eq {:\n\t/input Enter the name of your CoT/Tracker context template (NO SPACES ALLOWED). If you don't have one, click cancel and create one. | \n\t\t/if left={{pipe}} right=\"\" rule=eq \n\t\t\telse={: /setvar key=cotCTXTemplate {{pipe}} | \n\t\t\t/pass :}\n\t\t\t{: /flushvar menuSelect | /abort :}\n:} |\n\n/if left={{getvar::menuSelect}} right=\"CoT/Tracker Instruct Template\" rule=eq {:\n\t/input Enter the name of your CoT/Tracker instruct template (NO SPACES ALLOWED). If you don't have one without spaces, click cancel and create one. | \n\t\t/if left={{pipe}} right=\"\" rule=eq \n\t\t\telse={: /setvar key=cotInstructPreset {{pipe}} | \n\t\t\t/pass :}\n\t\t\t{: /flushvar menuSelect | /abort :}\n:} |\n\n/if left={{getvar::menuSelect}} right=\"CoT/Tracker Model\" rule=eq {:\n\t/input Enter the name of your model you'd like to use for CoT/Tracker (NO SPACES ALLOWED). | \n\t\t/if left={{pipe}} right=\"\" rule=eq \n\t\t\telse={: /setvar key=cotModel {{pipe}} | \n\t\t\t/pass :}\n\t\t\t{: /flushvar menuSelect | /abort :}\n:} |\n\n/if left={{getvar::menuSelect}} right=\"CoT/Tracker API\" rule=eq {:\n\t/input Enter the name of your API you'd like to use for CoT/Tracker (NO SPACES ALLOWED). | \n\t\t/if left={{pipe}} right=\"\" rule=eq \n\t\t\telse={: /setvar key=cotAPI {{pipe}} | \n\t\t\t/pass :}\n\t\t\t{: /flushvar menuSelect | /abort :}\n:} |\n\n/if left={{getvar::menuSelect}} right=\"CoT/Tracker Tokenizer\" rule=eq {:\n\t/buttons labels=[\"best_match\", \"gpt2\", \"llama\", \"llama3\", \"gemma\", \"nerd\", \"nerd2\", \"mistral\", \"yi\", \"claude\", \"api_current\", \"none\"] Select your tokenizer for CoT/Tracker info |\n\t\t/if left={{pipe}} right=\"\" rule=eq \n\t\t\telse={: /setvar key=cotTokenizer {{pipe}} | \n\t\t\t/pass :}\n\t\t\t{: /flushvar menuSelect | /abort :}\n:} |\n\n/if left={{getvar::menuSelect}} right=\"Character Sampler\" rule=eq {:\n\t/input Enter the name of your character generator text completion preset (NO SPACES ALLOWED). If you don't have one, click cancel and create one. This should be a chat text completion preset identical to your adventuring preset with a high amount of tokens allowed, such as 1K tokens | \n\t\t/if left={{pipe}} right=\"\" rule=eq \n\t\t\telse={: /setvar key=charPreset {{pipe}} | \n\t\t\t/pass :}\n\t\t\t{: /flushvar menuSelect | /abort :}\n:} |\n\n/if left={{getvar::menuSelect}} right=\"Character Context Template\" rule=eq {:\n\t/input Enter the name of your character context template (NO SPACES ALLOWED). | \n\t\t/if left={{pipe}} right=\"\" rule=eq \n\t\t\telse={: /setvar key=charCTXTemplate {{pipe}} | \n\t\t\t/pass :}\n\t\t\t{: /flushvar menuSelect | /abort :}\n:} |\n\n/if left={{getvar::menuSelect}} right=\"Character Instruct Template\" rule=eq {:\n\t/input Enter the name of your character instruct template you'd like to use for generating characters (NO SPACES ALLOWED). | \n\t\t/if left={{pipe}} right=\"\" rule=eq \n\t\t\telse={: /setvar key=charInsTemplate {{pipe}} | \n\t\t\t/pass :}\n\t\t\t{: /flushvar menuSelect | /abort :}\n:} |\n\n/if left={{getvar::menuSelect}} right=\"Character Model\" rule=eq {:\n\t/input Enter the name of your character model you'd like to use for generating characters (NO SPACES ALLOWED). | \n\t\t/if left={{pipe}} right=\"\" rule=eq \n\t\t\telse={: /setvar key=charModel {{pipe}} | \n\t\t\t/pass :}\n\t\t\t{: /flushvar menuSelect | /abort :}\n:} |\n\n/if left={{getvar::menuSelect}} right=\"Character API\" rule=eq {:\n\t/input Enter the name of your API you'd like to use for generating characters (NO SPACES ALLOWED). If you don't have one, click cancel and set one up. | \n\t\t/if left={{pipe}} right=\"\" rule=eq \n\t\t\telse={: /setvar key=charAPI {{pipe}} | \n\t\t\t/pass :}\n\t\t\t{: /flushvar menuSelect | /abort :}\n:} |\n\n/if left={{getvar::menuSelect}} right=\"Character Tokenizer\" rule=eq {:\n\t/buttons labels=[\"best_match\", \"gpt2\", \"llama\", \"llama3\", \"gemma\", \"nerd\", \"nerd2\", \"mistral\", \"yi\", \"claude\", \"api_current\", \"none\"] Select your tokenizer for creating characters |\n\t\t/if left={{pipe}} right=\"\" rule=eq \n\t\t\telse={: /setvar key=charTokenizer {{pipe}} | \n\t\t\t/pass :}\n\t\t\t{: /flushvar menuSelect | /abort :}\n:} |",
            "preventAutoExecute": true,
            "showLabel": false,
            "title": ""
        },
        {
            "automationId": "",
            "contextList": [],
            "executeOnAi": false,
            "executeOnChatChange": false,
            "executeOnGroupMemberDraft": false,
            "executeOnStartup": false,
            "executeOnUser": false,
            "id": 54,
            "isHidden": true,
            "label": "regex-Pile",
            "message": "/parser-flag STRICT_ESCAPING on ||\n\n/re-replace var=botLogic find=\"/\\<(.*)\\>/gm\" replace={{noop}} {{getvar::botLogic}} |\n/setvar key=botLogic {{pipe}} ||\n/re-replace var=botLogic find=\"/\\`/gm\" replace={{noop}} {{getvar::botLogic}} |\n/setvar key=botLogic {{pipe}} ||\n\n/re-replace var=botResponse find=\"/\\*\\*Time\\:\\*\\* (.*)/gm\" replace={{noop}} {{getvar::botResponse}} |\n/setvar key=botResponse {{pipe}} ||\n/re-replace var=botResponse find=\"/\\*\\*Current Location\\:\\*\\*(.*)/gm\" replace={{noop}} {{getvar::botResponse}} |\n/setvar key=botResponse {{pipe}} ||\n/re-replace var=botResponse find=\"/\\*\\*Nearby\\:\\*\\*(.*)/gm\" replace={{noop}} {{getvar::botResponse}} |\n/setvar key=botResponse {{pipe}} ||\n/re-replace var=botResponse find=\"/\\-\\-\\-/gm\" replace={{noop}} {{getvar::botResponse}} |\n/setvar key=botResponse {{pipe}} ||\n/re-replace var=botResponse find=\"/\\*\\*(.*)\\:\\*\\*(.*)/gm\" replace={{noop}} {{getvar::botResponse}} |\n/setvar key=botResponse ||\n/re-replace var=botResponse find=\"/[`\\s]*[\\[\\<]template[\\>\\]]/ims\" replace={{noop}} {{getvar::botResponse}} |\n/setvar key=botResponse ||\n/re-replace var=botResponse find=\"/[`\\s]*[\\[\\<]\\/template[\\>\\]]/ims\" replace={{noop}} {{getvar::botResponse}} |\n/setvar key=botResponse ||\n/re-replace var=botResponse find=\"/\\`/gm\" replace={{noop}} {{getvar::botResponse}} |\n/setvar key=botResponse {{pipe}} ||\n\n/re-replace var=UpdateTracker find=\"/\\[/gm\" replace={{noop}} {{getvar::UpdateTracker}} |\n/setvar key=UpdateTracker {{pipe}} ||\n/re-replace var=UpdateTracker find=\"/\\]/gm\" replace={{noop}} {{getvar::UpdateTracker}} |\n/setvar key=UpdateTracker {{pipe}} ||\n/re-replace var=UpdateTracker find=\"/[`\\s]*[\\[\\<]template[\\>\\]]/ims\" replace={{noop}} {{getvar::UpdateTracker}} |\n/setvar key=UpdateTracker ||\n/re-replace var=UpdateTracker find=\"/[`\\s]*[\\[\\<]\\/template[\\>\\]]/ims\" replace={{noop}} {{getvar::UpdateTracker}} |\n/setvar key=UpdateTracker ||\n/re-replace var=UpdateTracker find=\"/\\`/gm\" replace={{noop}} {{getvar::UpdateTracker}} |\n/setvar key=UpdateTracker {{pipe}} ||\n\n/re-replace var=UpdateTracker find=\"/((.|\\n)*)\\*\\*Current Time\\/Date\\:\\*\\* (.*)((.|\\n)*)/gm\" replace=$3 |\n/if left={{pipe}} right={{getvar::UpdateTracker}} rule=eq \n\telse=\"/setvar key=currentTime {{pipe}}\"\n\t\t\"/setvar key=currentTime <{{char}}, remember to put current time in the tracker>\" |\n/re-replace var=UpdateTracker find=\"/((.|\\n)*)\\*\\*Current Location\\:\\*\\* (.*)((.|\\n)*)/gm\" replace=$3 |\n/if left={{pipe}} right={{getvar::UpdateTracker}} rule=eq \n\telse=\"/setvar key=currentLocation {{pipe}}\"\n\t\t\"/setvar key=currentLocation <{{char}}, remember to put current location in the tracker>\" |\n/re-replace var=UpdateTracker find=\"/((.|\\n)*)\\*\\*Nearby Characters\\:\\*\\* (.*)((.|\\n)*)/gm\" replace=$3 |\n/if left={{pipe}} right={{getvar::UpdateTracker}} rule=eq \n\telse=\"/setvar key=currentNearby {{pipe}}\"\n\t\t\"/setvar key=currentNearby <{{char}}, remember to put nearby characters/creatures in the tracker>\" |\n/re-replace var=UpdateTracker find=\"/((.|\\n)*)\\*\\*Nearby Objects\\:\\*\\* (.*)((.|\\n)*)/gm\" replace=$3 |\n/if left={{pipe}} right={{getvar::UpdateTracker}} rule=eq \n\telse=\"/setvar key=currentObjects {{pipe}}\"\n\t\t\"/setvar key=currentObjects <{{char}}, remember to put nearby items/interactive objects in the tracker>\" |",
            "preventAutoExecute": true,
            "showLabel": false,
            "title": ""
        },
        {
            "automationId": "",
            "contextList": [],
            "executeOnAi": false,
            "executeOnChatChange": false,
            "executeOnGroupMemberDraft": false,
            "executeOnStartup": false,
            "executeOnUser": false,
            "id": 56,
            "isHidden": true,
            "label": "settings-Manager",
            "message": "/parser-flag STRICT_ESCAPING on ||\n\n/buttons labels=[\"Save Settings\", \"Load Settings\", \"Delete Settings\", \"Reset to Default\", \"Delete All Config Files\"] Settings Manager |\n/setvar key=\"menuSelect\" {{pipe}} ||\n\n/if left={{getvar::menuSelect}} right=\"Save Settings\" rule=eq  \"/:AdventureTools.saveSettings\" |\n\n/if left={{getvar::menuSelect}} right=\"Load Settings\" rule=eq  \"/:AdventureTools.loadSettings\" |\n\n/if left={{getvar::menuSelect}} right=\"Delete Settings\" rule=eq \n\t{: \n\t/buttons labels={{getglobalvar::settingsList}} Which settings file would you like to delete? |\n\t/setvar key=del_Item {{pipe}} ||\n\t/setvar key=tempList [] |\n\t/filter globalvar=settingsList {: /test left={{item}} right={{getvar::del_Item}} rule=neq :} |\n\t/foreach list={{pipe}} {: /addvar key=tempList {{item}} :} |\n\t/setglobalvar key=settingsList {{getvar::tempList}} |\n\t/flushglobalvar {{getvar::del_Item}} |\n\t/flushvar del_Item |\n\t/flushvar tempList |\n:} |\n\n/if left={{getvar::menuSelect}} right=\"Reset to Default\" rule=eq\n\t{: /flushvar advAPI | /flushvar adventurePreset | /flushvar advCTXTemplate | /flushvar adventureInstructPreset | /flushvar advModel | /flushvar advTokenizer | /flushvar cotAPI | /flushvar cotCTXTemplate | /flushvar cotInstructPreset | /flushvar cotModel | /flushvar cotPreset | /flushvar cotTokenizer | /flushvar charAPI | /flushvar charCTXTemplate | /flushvar charInsTemplate | /flushvar charModel | /flushvar charPreset | /flushvar charTokenizer | /flushvar cotPrompt | /flushvar cotResponsePrompt | /flushvar cotTemplate | /flushvar footerMode | /flushvar lorebookName | /flushvar messageMode | /flushvar responsePrompt | /flushvar toolsVersion | /flushvar trackerPrompt | /flushvar trackerRefreshPrompt | /flushvar trackerTemplate | /popup okButton=\"I Understand\" Settings reverted to default! Run the config to set your version and message mode again, or load a settings file. |\n\t:} |\n\n/if left={{getvar::menuSelect}} right=\"Delete All Config Files\" rule=eq \"/:AdventureTools.delete-All-Settings\" |",
            "preventAutoExecute": true,
            "showLabel": false,
            "title": ""
        },
        {
            "automationId": "",
            "contextList": [],
            "executeOnAi": false,
            "executeOnChatChange": false,
            "executeOnGroupMemberDraft": false,
            "executeOnStartup": false,
            "executeOnUser": false,
            "id": 58,
            "isHidden": true,
            "label": "delete-All-Settings",
            "message": "/foreach globalvar=settingsList {: /flushglobalvar {{item}} :} |\n\n/flushglobalvar settingsList |",
            "preventAutoExecute": true,
            "showLabel": false,
            "title": ""
        }
    ],
    "version": 2
}